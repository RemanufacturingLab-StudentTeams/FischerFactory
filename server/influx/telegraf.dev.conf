# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply surround
# them with ${}. For strings the variable must be within quotes (ie, "${STR_VAR}"),
# for numbers and booleans they should be plain (ie, ${INT_VAR}, ${BOOL_VAR})


# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 1000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Collection offset is used to shift the collection by the given amount.
  ## This can be be used to avoid many plugins querying constraint devices
  ## at the same time by manually scheduling them in time.
  # collection_offset = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## Collected metrics are rounded to the precision specified. Precision is
  ## specified as an interval with an integer + unit (e.g. 0s, 10ms, 2us, 4s).
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  ##
  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s:
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ##
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  precision = "0s"

  ## Log at debug level.
  debug = true
  ## Log only error level messages.
  quiet = false

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################


# # Configuration for sending metrics to InfluxDB 2.0
[[outputs.influxdb_v2]]
#   ## The URLs of the InfluxDB cluster nodes.
#   ##
#   ## Multiple URLs can be specified for a single cluster, only ONE of the
#   ## urls will be written to each interval.
#   ##   ex: urls = ["https://us-west-2-1.aws.cloud2.influxdata.com"]
  urls = ["http://localhost:8086"]
#
#   ## Token for authentication.
  token = "****"
#
#   ## Organization is the name of the organization you wish to write to.
  organization = "Remanufacturing Lab"
#
#   ## Destination bucket to write into.
  bucket = "FischerFactory"

# # Configuration for Amon Server to send metrics to.
# [[outputs.amon]]
#   ## Amon Server Key
#   server_key = "my-server-key" # required.
#
#   ## Amon Instance URL
#   amon_instance = "https://youramoninstance" # required
#
#   ## Connection timeout.
#   # timeout = "5s"

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################


# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states
  ## NOTE: The resulting 'time_active' field INCLUDES 'iowait'!
  report_active = false
  ## If true and the info is available then add core_id and physical_id tags
  core_tags = false

# Read metrics about disk usage by mount point
[[inputs.disk]]
  ## By default stats will be gathered for all mount points.
  ## Set mount_points will restrict the stats to only the specified mount points.
  # mount_points = ["/"]

  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

# Read metrics about disk IO by device
[[inputs.diskio]]

# Plugin to collect various Linux kernel statistics.
# This plugin ONLY supports Linux
[[inputs.kernel]]

# Read metrics about memory usage
[[inputs.mem]]
  # no configuration

# Get the number of processes and group them by status
# This plugin ONLY supports non-Windows
[[inputs.processes]]

# Read metrics about swap memory usage
# This plugin ONLY supports Linux
[[inputs.swap]]
  # no configuration

# Read metrics about system load & uptime
[[inputs.system]]
  # no configuration

# # Read metrics from MQTT topic(s)
[[inputs.mqtt_consumer]]
  servers = ["tcp://127.0.0.1:1883"]
  topics = [
    "f/i/state/dsi",
    "f/i/state/dso"
  ]
  topic_tag = "topic"
  qos = 0
  client_id = "telegraf_state_dsi_dso"
  data_format = "json_v2"
 [[inputs.mqtt_consumer.json_v2]]
 measurement_name_path = "station"
  [[inputs.mqtt_consumer.json_v2.tag]]
    path = "station"
  [[inputs.mqtt_consumer.json_v2.tag]]
    path = "description"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "code"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "ts"

[[inputs.mqtt_consumer]]
  servers = ["tcp://127.0.0.1:1883"]
  topics = [
    "f/i/state/mpo"
  ]
  topic_tag = "topic"
  qos = 0
  client_id = "telegraf_state_mpo"
  data_format = "json_v2"
 [[inputs.mqtt_consumer.json_v2]]
 measurement_name_path = "station"
  [[inputs.mqtt_consumer.json_v2.tag]]
    path = "station"
  [[inputs.mqtt_consumer.json_v2.tag]]
    path = "target"
  [[inputs.mqtt_consumer.json_v2.tag]]
    path = "description"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "code"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "active"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "error"
    optional = true
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "errorMessage"
    optional = true
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "inOven"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "tsOven"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "atSaw"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "tsSaw"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "workpieceID"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "workpieceType"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "setOvenTime"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "setSawTime"

[[inputs.mqtt_consumer]]
  servers = ["tcp://127.0.0.1:1883"]
  topics = [
    "f/i/state/sld"
  ]
  topic_tag = "topic"
  qos = 0
  client_id = "telegraf_state_sld"
  data_format = "json_v2"
 [[inputs.mqtt_consumer.json_v2]]
 measurement_name_path = "station"
  [[inputs.mqtt_consumer.json_v2.tag]]
    path = "station"
  [[inputs.mqtt_consumer.json_v2.tag]]
    path = "target"
  [[inputs.mqtt_consumer.json_v2.tag]]
    path = "description"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "code"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "active"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "error"
    optional = true
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "errorMessage"
    optional = true
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "colorObserved"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "observedColor"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "tsTransportBelt"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "onTransportBelt"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "tsColor"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "workpieceID"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "workpieceType"

[[inputs.mqtt_consumer]]
  servers = ["tcp://127.0.0.1:1883"]
  topics = [
    "f/i/state/vgr",
  ]
  topic_tag = "topic"
  qos = 0
  client_id = "telegraf_state_vgr"
  data_format = "json_v2"
 [[inputs.mqtt_consumer.json_v2]]
 measurement_name_path = "station"
  [[inputs.mqtt_consumer.json_v2.tag]]
    path = "station"
  [[inputs.mqtt_consumer.json_v2.tag]]
    path = "target"
  [[inputs.mqtt_consumer.json_v2.tag]]
    path = "description"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "code"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "ts"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "active"

[[inputs.mqtt_consumer]]
  servers = ["tcp://127.0.0.1:1883"]
  topics = [
    "f/i/state/hbw",
  ]
  topic_tag = "topic"
  qos = 0
  client_id = "telegraf_state_hbw"
  data_format = "json_v2"
 [[inputs.mqtt_consumer.json_v2]]
 measurement_name_path = "station"
  [[inputs.mqtt_consumer.json_v2.tag]]
    path = "station"
  [[inputs.mqtt_consumer.json_v2.tag]]
    path = "target"
  [[inputs.mqtt_consumer.json_v2.tag]]
    path = "description"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "code"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "ts"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "active"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "err"
  [[inputs.mqtt_consumer.json_v2.field]]
    path = "errorMessage"
    
