FUNCTION_BLOCK "PRG_HBW_Ablauf"
TITLE = Program Ablauf HBW
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : 'A.Schaefer'
VERSION : 0.1
   VAR 
      lx_Init { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      lx_Start_TON_Fill_HBW { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      lx_Start_TON_Wait { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      lx_Time_Error { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      lt_TON_Wait { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time;
      lx_Start_TON_State { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      lx_Storage { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      ldt_MQTT { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Date_And_Time;
      li_Return_LDT { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      lldt_Outsource { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LDT;
      li_Lights { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      li_Lights_old { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      li_Counter_Act_Hor { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      li_Counter_Act_Ver { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      li_StepCase { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      ldi_PosRack_Horizontal { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      ldi_PosRack_Vertical { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      ls_Color { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;
      lfb_TON_State {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
      lfb_TON_ConveyerBelt_Out {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
      lfb_TON_Wait {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
      lfb_TON_Fill_HBW {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
      lfb_TON_Error {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
   END_VAR

   VAR_TEMP 
      ti_Counter : Int;
      ti_Counter_Hor : Int;
      ti_Counter_Ver : Int;
      tx_Found_Position : Bool;
   END_VAR


BEGIN
	IF #lx_Init THEN
	    
	    // Restart after set Positioning
	    IF "gtyp_Setup".x_Set_Pos_Activ OR "gtyp_HBW".x_Start_Park_Position THEN
	        #li_StepCase := 0;
	    END_IF;
	    
	    // wait time state
	    #lfb_TON_State(IN := NOT #lx_Start_TON_State,
	                   PT := T#2s);
	    
	    // runtime monitoring error
	    #lfb_TON_Error(IN := #lx_Time_Error,
	                   PT := T#30s);
	    
	    // Fill the HBW-Rack with Items
	    #lfb_TON_Fill_HBW(IN := #lx_Start_TON_Fill_HBW,
	                      PT := T#60s);
	    
	    IF #lfb_TON_Fill_HBW.Q THEN
	        #lx_Start_TON_Fill_HBW := FALSE;
	    END_IF;
	    
	    IF #lx_Start_TON_Fill_HBW AND ("IX_Fill_HBW" OR "gtyp_Setup".x_Fill_Rack_HBW) THEN
	        #li_Return_LDT := RD_SYS_T(#ldt_MQTT);
	        
	        "gtyp_HBW".Rack_Workpiece[1, 1].s_id := '04c34892186580';
	        "gtyp_HBW".Rack_Workpiece[1, 1].s_state := 'RAW';
	        "gtyp_HBW".Rack_Workpiece[1, 1].s_type := 'WHITE';
	        "gtyp_HBW".Rack_History[1, 1].History[1].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[1, 1].History[1].i_code := 100;
	        "gtyp_HBW".Rack_History[1, 1].History[2].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[1, 1].History[2].i_code := 200;
	        "gtyp_HBW".Rack_History[1, 1].History[3].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[1, 1].History[3].i_code := 300;
	        
	        "gtyp_HBW".Rack_Workpiece[1, 2].s_id := '04c34892186581';
	        "gtyp_HBW".Rack_Workpiece[1, 2].s_state := 'RAW';
	        "gtyp_HBW".Rack_Workpiece[1, 2].s_type := 'WHITE';
	        "gtyp_HBW".Rack_History[1, 2].History[1].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[1, 2].History[1].i_code := 100;
	        "gtyp_HBW".Rack_History[1, 2].History[2].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[1, 2].History[2].i_code := 200;
	        "gtyp_HBW".Rack_History[1, 2].History[3].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[1, 2].History[3].i_code := 300;
	        
	        "gtyp_HBW".Rack_Workpiece[1, 3].s_id := '04c34892186582';
	        "gtyp_HBW".Rack_Workpiece[1, 3].s_state := 'RAW';
	        "gtyp_HBW".Rack_Workpiece[1, 3].s_type := 'WHITE';
	        "gtyp_HBW".Rack_History[1, 3].History[1].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[1, 3].History[1].i_code := 100;
	        "gtyp_HBW".Rack_History[1, 3].History[2].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[1, 3].History[2].i_code := 200;
	        "gtyp_HBW".Rack_History[1, 3].History[3].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[1, 3].History[3].i_code := 300;
	        
	        "gtyp_HBW".Rack_Workpiece[2, 1].s_id := '04c34892186583';
	        "gtyp_HBW".Rack_Workpiece[2, 1].s_state := 'RAW';
	        "gtyp_HBW".Rack_Workpiece[2, 1].s_type := 'RED';
	        "gtyp_HBW".Rack_History[2, 1].History[1].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[2, 1].History[1].i_code := 100;
	        "gtyp_HBW".Rack_History[2, 1].History[2].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[2, 1].History[2].i_code := 200;
	        "gtyp_HBW".Rack_History[2, 1].History[3].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[2, 1].History[3].i_code := 300;
	        
	        "gtyp_HBW".Rack_Workpiece[2, 2].s_id := '04c34892186584';
	        "gtyp_HBW".Rack_Workpiece[2, 2].s_state := 'RAW';
	        "gtyp_HBW".Rack_Workpiece[2, 2].s_type := 'RED';
	        "gtyp_HBW".Rack_History[2, 2].History[1].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[2, 2].History[1].i_code := 100;
	        "gtyp_HBW".Rack_History[2, 2].History[2].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[2, 2].History[2].i_code := 200;
	        "gtyp_HBW".Rack_History[2, 2].History[3].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[2, 2].History[3].i_code := 300;
	        
	        "gtyp_HBW".Rack_Workpiece[2, 3].s_id := '04c34892186585';
	        "gtyp_HBW".Rack_Workpiece[2, 3].s_state := 'RAW';
	        "gtyp_HBW".Rack_Workpiece[2, 3].s_type := 'RED';
	        "gtyp_HBW".Rack_History[2, 3].History[1].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[2, 3].History[1].i_code := 100;
	        "gtyp_HBW".Rack_History[2, 3].History[2].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[2, 3].History[2].i_code := 200;
	        "gtyp_HBW".Rack_History[2, 3].History[3].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[2, 3].History[3].i_code := 300;
	        
	        "gtyp_HBW".Rack_Workpiece[3, 1].s_id := '04c34892186586';
	        "gtyp_HBW".Rack_Workpiece[3, 1].s_state := 'RAW';
	        "gtyp_HBW".Rack_Workpiece[3, 1].s_type := 'BLUE';
	        "gtyp_HBW".Rack_History[3, 1].History[1].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[3, 1].History[1].i_code := 100;
	        "gtyp_HBW".Rack_History[3, 1].History[2].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[3, 1].History[2].i_code := 200;
	        "gtyp_HBW".Rack_History[3, 1].History[3].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[3, 1].History[3].i_code := 300;
	        
	        "gtyp_HBW".Rack_Workpiece[3, 2].s_id := '04c34892186587';
	        "gtyp_HBW".Rack_Workpiece[3, 2].s_state := 'RAW';
	        "gtyp_HBW".Rack_Workpiece[3, 2].s_type := 'BLUE';
	        "gtyp_HBW".Rack_History[3, 2].History[1].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[3, 2].History[1].i_code := 100;
	        "gtyp_HBW".Rack_History[3, 2].History[2].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[3, 2].History[2].i_code := 200;
	        "gtyp_HBW".Rack_History[3, 2].History[3].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[3, 2].History[3].i_code := 300;
	        
	        "gtyp_HBW".Rack_Workpiece[3, 3].s_id := '04c34892186588';
	        "gtyp_HBW".Rack_Workpiece[3, 3].s_state := 'RAW';
	        "gtyp_HBW".Rack_Workpiece[3, 3].s_type := 'BLUE';
	        "gtyp_HBW".Rack_History[3, 3].History[1].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[3, 3].History[1].i_code := 100;
	        "gtyp_HBW".Rack_History[3, 3].History[2].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[3, 3].History[2].i_code := 200;
	        "gtyp_HBW".Rack_History[3, 3].History[3].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_HBW".Rack_History[3, 3].History[3].i_code := 300;
	        
	        #lx_Start_TON_Fill_HBW := FALSE;
	        "gtyp_Setup".x_Fill_Rack_HBW := FALSE;
	    END_IF;
	    
	    "gtyp_Setup".x_Start_TON_Fill_HBW := #lx_Start_TON_Fill_HBW;
	    
	    // state of the Stock HBW cyclically transmitted to the cloud
	    IF (#lfb_TON_State.Q OR (#li_Lights <> #li_Lights_old)) AND NOT #lx_Start_TON_State THEN
	        #li_Lights_old := #li_Lights;
	        #lx_Start_TON_State := TRUE;
	        #li_Return_LDT := RD_SYS_T(#ldt_MQTT);
	        "gtyp_Interface_Dashboard".Subscribe.Stock_HBW.StockItem := "gtyp_HBW".Rack_Workpiece;
	        "gtyp_Interface_Dashboard".Subscribe.Stock_HBW.ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        
	        "gtyp_Interface_Dashboard".Subscribe.State_HBW.ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_Interface_Dashboard".Subscribe.State_HBW.i_code := #li_Lights;
	        "gtyp_Interface_Dashboard".Subscribe.State_HBW.s_description := '';
	        "gtyp_Interface_Dashboard".Subscribe.State_HBW.s_station := 'hbw';
	        "gtyp_Interface_Dashboard".Subscribe.State_HBW.s_target := '';
	        
	        "gtyp_Interface_Dashboard".Subscribe.State_HBW.x_error := "gtyp_HBW".x_Error;
	        "gtyp_Interface_Dashboard".Subscribe.State_HBW.s_errorMessage := "gtyp_HBW".s_ErrorMessage;
	    END_IF;
	    
	    // restart wait time state
	    IF NOT #lfb_TON_State.Q AND #lx_Start_TON_State THEN
	        #lx_Start_TON_State := FALSE;
	    END_IF;
	    
	    // FB TON Wait
	    #lfb_TON_Wait(IN := #lx_Start_TON_Wait,
	                  PT := #lt_TON_Wait);
	    
	    //Run-on time Conveyer Belt
	    #lfb_TON_ConveyerBelt_Out(IN := NOT "IX_HBW_LightBarrierOutside_I3",
	                              PT := T#300ms);
	    
	    // Reload the calibration values - Rack Array
	    // A
	    "gtyp_HBW".Rack_Pos[1, 1].di_PosRack_Horizontal := "gtyp_HBW".di_PosRack_A1_Horizontal;
	    "gtyp_HBW".Rack_Pos[2, 1].di_PosRack_Horizontal := "gtyp_HBW".di_PosRack_A1_Horizontal;
	    "gtyp_HBW".Rack_Pos[3, 1].di_PosRack_Horizontal := "gtyp_HBW".di_PosRack_A1_Horizontal;
	    // B
	    "gtyp_HBW".Rack_Pos[1, 2].di_PosRack_Horizontal := "gtyp_HBW".di_PosRack_B2_Horizontal;
	    "gtyp_HBW".Rack_Pos[2, 2].di_PosRack_Horizontal := "gtyp_HBW".di_PosRack_B2_Horizontal;
	    "gtyp_HBW".Rack_Pos[3, 2].di_PosRack_Horizontal := "gtyp_HBW".di_PosRack_B2_Horizontal;
	    // C
	    "gtyp_HBW".Rack_Pos[1, 3].di_PosRack_Horizontal := "gtyp_HBW".di_PosRack_C3_Horizontal;
	    "gtyp_HBW".Rack_Pos[2, 3].di_PosRack_Horizontal := "gtyp_HBW".di_PosRack_C3_Horizontal;
	    "gtyp_HBW".Rack_Pos[3, 3].di_PosRack_Horizontal := "gtyp_HBW".di_PosRack_C3_Horizontal;
	    // 1
	    "gtyp_HBW".Rack_Pos[1, 1].di_PosRack_Vertical := "gtyp_HBW".di_PosRack_A1_Vertical;
	    "gtyp_HBW".Rack_Pos[1, 2].di_PosRack_Vertical := "gtyp_HBW".di_PosRack_A1_Vertical;
	    "gtyp_HBW".Rack_Pos[1, 3].di_PosRack_Vertical := "gtyp_HBW".di_PosRack_A1_Vertical;
	    // 2
	    "gtyp_HBW".Rack_Pos[2, 1].di_PosRack_Vertical := "gtyp_HBW".di_PosRack_B2_Vertical;
	    "gtyp_HBW".Rack_Pos[2, 2].di_PosRack_Vertical := "gtyp_HBW".di_PosRack_B2_Vertical;
	    "gtyp_HBW".Rack_Pos[2, 3].di_PosRack_Vertical := "gtyp_HBW".di_PosRack_B2_Vertical;
	    // 3
	    "gtyp_HBW".Rack_Pos[3, 1].di_PosRack_Vertical := "gtyp_HBW".di_PosRack_C3_Vertical;
	    "gtyp_HBW".Rack_Pos[3, 2].di_PosRack_Vertical := "gtyp_HBW".di_PosRack_C3_Vertical;
	    "gtyp_HBW".Rack_Pos[3, 3].di_PosRack_Vertical := "gtyp_HBW".di_PosRack_C3_Vertical;
	    
	    // step chain HBW
	    CASE #li_StepCase OF
	            
	        0:  // init
	            #lx_Start_TON_Wait := FALSE;
	            #lx_Time_Error := FALSE;
	            
	            "gtyp_HBW".Horizontal_Axis.x_Start_Positioning := FALSE;
	            "gtyp_HBW".Vertical_Axis.x_Start_Positioning := FALSE;
	            "gtyp_HBW".Horizontal_Axis.x_Reference := FALSE;
	            "gtyp_HBW".Vertical_Axis.x_Reference := FALSE;
	            "gtyp_HBW".Horizontal_Axis.i_PWM := -1;
	            "gtyp_HBW".Vertical_Axis.i_PWM := -1;
	            
	            "gtyp_HBW".i_Red_Available := 0;
	            "gtyp_HBW".i_Blue_Available := 0;
	            "gtyp_HBW".i_White_Available := 0;
	            //Check the current stock
	            FOR #ti_Counter_Hor := 1 TO 3 DO
	                FOR #ti_Counter_Ver := 1 TO 3 DO
	                    IF "gtyp_HBW".Rack_Workpiece[#ti_Counter_Ver, #ti_Counter_Hor].s_type = 'RED' THEN
	                        "gtyp_HBW".i_Red_Available += 1;
	                    ELSIF "gtyp_HBW".Rack_Workpiece[#ti_Counter_Ver, #ti_Counter_Hor].s_type = 'BLUE' THEN
	                        "gtyp_HBW".i_Blue_Available += 1;
	                    ELSIF "gtyp_HBW".Rack_Workpiece[#ti_Counter_Ver, #ti_Counter_Hor].s_type = 'WHITE' THEN
	                        "gtyp_HBW".i_White_Available += 1;
	                    END_IF;
	                END_FOR;
	            END_FOR;
	            
	            IF NOT "gtyp_HBW".x_Error AND NOT "gtyp_Setup".x_Set_Pos_Activ AND NOT "gtyp_HBW".x_Start_Park_Position THEN
	                #li_StepCase := 10;
	            END_IF;
	            
	        10:  // Position Cantilever Back
	            #li_Lights := 2;
	            IF "IX_HBW_SwitchCantileverFront_I5" OR NOT "IX_HBW_SwitchCantileverBack_I6" THEN
	                "QX_HBW_M4_CantileverBackward_Q8" := TRUE;
	                "QX_HBW_M4_CantileverForward_Q7" := FALSE;
	            ELSIF NOT "IX_HBW_SwitchCantileverFront_I5" AND "IX_HBW_SwitchCantileverBack_I6" THEN
	                "QX_HBW_M4_CantileverBackward_Q8" := FALSE;
	                "QX_HBW_M4_CantileverForward_Q7" := FALSE;
	                #li_StepCase := 20;
	            END_IF;
	            
	        20: //homing vertical/horizontal axis
	            
	            "gtyp_HBW".Horizontal_Axis.x_Reference := TRUE;
	            "gtyp_HBW".Vertical_Axis.x_Reference := TRUE;
	            
	            IF NOT "gtyp_HBW".Horizontal_Axis.x_Referenced AND NOT "gtyp_HBW".Vertical_Axis.x_Referenced THEN
	                #li_StepCase := 30;
	            END_IF;
	            
	        30: // homed vertical/horizontal axis
	            IF "gtyp_HBW".Horizontal_Axis.x_Referenced THEN
	                "gtyp_HBW".Horizontal_Axis.x_Reference := FALSE;
	            END_IF;
	            IF "gtyp_HBW".Vertical_Axis.x_Referenced THEN
	                "gtyp_HBW".Vertical_Axis.x_Reference := FALSE;
	            END_IF;
	            
	            IF "gtyp_HBW".Horizontal_Axis.x_Referenced AND "gtyp_HBW".Vertical_Axis.x_Referenced THEN
	                "gtyp_HBW".Horizontal_Axis.x_Reference := FALSE;
	                "gtyp_HBW".Vertical_Axis.x_Reference := FALSE;
	                #li_StepCase := 40;
	            END_IF;
	            
	        40: // Deciding which route to take
	            
	            #li_Lights := 1;
	            #lx_Storage := FALSE;
	            
	            // Procedure - storage
	            IF "gtyp_VGR".x_HBW_Storage THEN
	                #li_Lights := 2;
	                #li_StepCase := 50;
	                // Procedure - outsource
	            ELSIF "gtyp_VGR".x_HBW_Outsource THEN
	                #li_Lights := 2;
	                #li_StepCase := 60;
	            END_IF;
	            
	        50: // Evaluate the next free position in the high-bay warehouse
	            //If no suitable spot is found, return to case 40 (starts a loop)
	            #li_StepCase := 40;
	            FOR #ti_Counter_Hor := 1 TO 3 DO
	                FOR #ti_Counter_Ver := 1 TO 3 DO
	                    IF "gtyp_HBW".Rack_Workpiece[#ti_Counter_Ver, #ti_Counter_Hor].s_id = '0' THEN
	                        #li_Counter_Act_Hor := #ti_Counter_Hor;
	                        #li_Counter_Act_Ver := #ti_Counter_Ver;
	                        #ldi_PosRack_Horizontal := "gtyp_HBW".Rack_Pos[#ti_Counter_Ver, #ti_Counter_Hor].di_PosRack_Horizontal;
	                        #ldi_PosRack_Vertical := "gtyp_HBW".Rack_Pos[#ti_Counter_Ver, #ti_Counter_Hor].di_PosRack_Vertical;
	                        #li_StepCase := 70;
	                        EXIT;
	                    END_IF;
	                END_FOR;
	                IF #li_StepCase = 70 THEN
	                    EXIT;
	                END_IF;
	            END_FOR;
	            
	        60: // Evaluate the workpiece first stored in the high-bay warehouse with the appropriate color
	            #li_Return_LDT := RD_SYS_T(#ldt_MQTT);
	            #lldt_Outsource := #ldt_MQTT;
	            
	            #tx_Found_Position := FALSE;
	            
	            FOR #ti_Counter_Hor := 1 TO 3 DO
	                FOR #ti_Counter_Ver := 1 TO 3 DO
	                    IF ("gtyp_VGR".s_HBW_Outsource_Typ = "gtyp_HBW".Rack_Workpiece[#ti_Counter_Ver, #ti_Counter_Hor].s_type)
	                        AND (#lldt_Outsource > "gtyp_HBW".Rack_History[#ti_Counter_Ver, #ti_Counter_Hor].History[3].ldt_ts)
	                        AND NOT ("gtyp_HBW".Rack_History[#ti_Counter_Ver, #ti_Counter_Hor].History[3].ldt_ts = LDT#1970-01-01-00:00:00) THEN
	                        #tx_Found_Position := TRUE;
	                        #lldt_Outsource := "gtyp_HBW".Rack_History[#ti_Counter_Ver, #ti_Counter_Hor].History[3].ldt_ts;
	                        #li_Counter_Act_Hor := #ti_Counter_Hor;
	                        #li_Counter_Act_Ver := #ti_Counter_Ver;
	                        #ldi_PosRack_Horizontal := "gtyp_HBW".Rack_Pos[#ti_Counter_Ver, #ti_Counter_Hor].di_PosRack_Horizontal;
	                        #ldi_PosRack_Vertical := "gtyp_HBW".Rack_Pos[#ti_Counter_Ver, #ti_Counter_Hor].di_PosRack_Vertical;
	                    END_IF;
	                END_FOR;
	            END_FOR;
	            
	            //If a suitable spot is found, use it, else go back to case 40 (starts a loop)
	            IF #tx_Found_Position THEN
	                #li_StepCase := 70;
	            ELSE
	                #li_StepCase := 40;
	            END_IF;
	            
	        70: // Position vertical/horizontal HBW
	            "gtyp_HBW".Horizontal_Axis.di_Target_Position := #ldi_PosRack_Horizontal;
	            "gtyp_HBW".Horizontal_Axis.x_Start_Positioning := TRUE;
	            "gtyp_HBW".Vertical_Axis.di_Target_Position := #ldi_PosRack_Vertical;
	            "gtyp_HBW".Vertical_Axis.x_Start_Positioning := TRUE;
	            
	            IF ("gtyp_HBW".Horizontal_Axis.di_Actual_Position <= (#ldi_PosRack_Horizontal + "gtyp_HBW".Horizontal_Axis.Config.di_Pos_Window))
	                AND ("gtyp_HBW".Horizontal_Axis.di_Actual_Position >= (#ldi_PosRack_Horizontal - "gtyp_HBW".Horizontal_Axis.Config.di_Pos_Window))
	                AND "gtyp_HBW".Horizontal_Axis.x_Position_Reached THEN
	                "gtyp_HBW".Horizontal_Axis.x_Start_Positioning := FALSE;
	            END_IF;
	            
	            IF ("gtyp_HBW".Vertical_Axis.di_Actual_Position <= (#ldi_PosRack_Vertical + "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND ("gtyp_HBW".Vertical_Axis.di_Actual_Position >= (#ldi_PosRack_Vertical - "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND "gtyp_HBW".Vertical_Axis.x_Position_Reached THEN
	                "gtyp_HBW".Vertical_Axis.x_Start_Positioning := FALSE;
	            END_IF;
	            
	            IF ("gtyp_HBW".Horizontal_Axis.di_Actual_Position <= (#ldi_PosRack_Horizontal + "gtyp_HBW".Horizontal_Axis.Config.di_Pos_Window))
	                AND ("gtyp_HBW".Horizontal_Axis.di_Actual_Position >= (#ldi_PosRack_Horizontal - "gtyp_HBW".Horizontal_Axis.Config.di_Pos_Window))
	                AND "gtyp_HBW".Horizontal_Axis.x_Position_Reached
	                AND ("gtyp_HBW".Vertical_Axis.di_Actual_Position <= (#ldi_PosRack_Vertical + "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND ("gtyp_HBW".Vertical_Axis.di_Actual_Position >= (#ldi_PosRack_Vertical - "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND "gtyp_HBW".Vertical_Axis.x_Position_Reached THEN
	                "gtyp_HBW".Horizontal_Axis.x_Start_Positioning := FALSE;
	                "gtyp_HBW".Vertical_Axis.x_Start_Positioning := FALSE;
	                #li_StepCase := 80;
	            END_IF;
	            
	        80: // Position Cantilever Forward HBW
	            
	            "QX_HBW_M4_CantileverBackward_Q8" := FALSE;
	            "QX_HBW_M4_CantileverForward_Q7" := TRUE;
	            
	            IF "IX_HBW_SwitchCantileverFront_I5" AND NOT "IX_HBW_SwitchCantileverBack_I6" THEN
	                "QX_HBW_M4_CantileverBackward_Q8" := FALSE;
	                "QX_HBW_M4_CantileverForward_Q7" := FALSE;
	                #li_StepCase := 90;
	            END_IF;
	            
	        90: // Position vertical+offset HBW
	            "gtyp_HBW".Vertical_Axis.di_Target_Position := #ldi_PosRack_Vertical - "gtyp_HBW".di_Offset_Pos_Rack_Vertical;
	            "gtyp_HBW".Vertical_Axis.x_Start_Positioning := TRUE;
	            
	            IF ("gtyp_HBW".Vertical_Axis.di_Actual_Position <= (#ldi_PosRack_Vertical - "gtyp_HBW".di_Offset_Actual_Pickup)) THEN
	                "Simulation_Variables".HBW_Product_Bind := INT_TO_BYTE(#li_Counter_Act_Ver + (#li_Counter_Act_Hor - 1) * 3);
	            END_IF;
	            
	            IF ("gtyp_HBW".Vertical_Axis.di_Actual_Position <= (#ldi_PosRack_Vertical - "gtyp_HBW".di_Offset_Pos_Rack_Vertical + "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND ("gtyp_HBW".Vertical_Axis.di_Actual_Position >= (#ldi_PosRack_Vertical - "gtyp_HBW".di_Offset_Pos_Rack_Vertical - "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND "gtyp_HBW".Vertical_Axis.x_Position_Reached THEN
	                "gtyp_HBW".Vertical_Axis.x_Start_Positioning := FALSE;
	                #li_StepCase := 100;
	            END_IF;
	            
	        100: // Position cantilever Back HBW
	            
	            "QX_HBW_M4_CantileverBackward_Q8" := TRUE;
	            "QX_HBW_M4_CantileverForward_Q7" := FALSE;
	            
	            IF NOT "IX_HBW_SwitchCantileverFront_I5" AND "IX_HBW_SwitchCantileverBack_I6" THEN
	                IF "gtyp_VGR".x_HBW_Storage THEN
	                    "gtyp_HBW".Rack_Workpiece[#li_Counter_Act_Ver, #li_Counter_Act_Hor].s_id := '';
	                ELSIF "gtyp_VGR".x_HBW_Outsource THEN
	                    "gtyp_Interface_Dashboard".Subscribe.State_HBW.x_active := TRUE;
	                    "gtyp_HBW".History := "gtyp_HBW".Rack_History[#li_Counter_Act_Ver, #li_Counter_Act_Hor].History;
	                    "gtyp_HBW".Workpiece := "gtyp_HBW".Rack_Workpiece[#li_Counter_Act_Ver, #li_Counter_Act_Hor];
	                    #li_Return_LDT := RD_SYS_T(#ldt_MQTT);
	                    "gtyp_HBW".History[4].i_code := 400;
	                    "gtyp_HBW".History[4].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	                    
	                    "gtyp_HBW".Rack_Workpiece[#li_Counter_Act_Ver, #li_Counter_Act_Hor].s_id := '';
	                    "gtyp_HBW".Rack_Workpiece[#li_Counter_Act_Ver, #li_Counter_Act_Hor].s_state := '';
	                    "gtyp_HBW".Rack_Workpiece[#li_Counter_Act_Ver, #li_Counter_Act_Hor].s_type := '';
	                    
	                    IF "gtyp_VGR".s_HBW_Outsource_Typ = 'RED' THEN
	                        "gtyp_HBW".i_Red_Available -= 1;
	                    ELSIF "gtyp_VGR".s_HBW_Outsource_Typ = 'BLUE' THEN
	                        "gtyp_HBW".i_Blue_Available -= 1;
	                    ELSIF "gtyp_VGR".s_HBW_Outsource_Typ = 'WHITE' THEN
	                        "gtyp_HBW".i_White_Available -= 1;
	                    END_IF;
	                    
	                    FOR #ti_Counter := 1 TO 8 DO
	                        "gtyp_HBW".Rack_History[#li_Counter_Act_Ver, #li_Counter_Act_Hor].History[#ti_Counter].i_code := 0;
	                        "gtyp_HBW".Rack_History[#li_Counter_Act_Ver, #li_Counter_Act_Hor].History[#ti_Counter].ldt_ts := DT#1990-01-01-00:00:00;
	                    END_FOR;
	                END_IF;
	                "QX_HBW_M4_CantileverBackward_Q8" := FALSE;
	                "QX_HBW_M4_CantileverForward_Q7" := FALSE;
	                #li_StepCase := 110;
	            END_IF;
	            
	        110: // homing vertical/horizontal axis
	            
	            "gtyp_HBW".Horizontal_Axis.x_Reference := TRUE;
	            
	            "gtyp_HBW".Vertical_Axis.di_Target_Position := "gtyp_HBW".di_PosBelt_Vertical - "gtyp_HBW".di_Offset_Pos_Belt_Vertical;
	            "gtyp_HBW".Vertical_Axis.x_Start_Positioning := TRUE;
	            
	            IF ("gtyp_HBW".Vertical_Axis.di_Actual_Position <= ("gtyp_HBW".di_PosBelt_Vertical - "gtyp_HBW".di_Offset_Pos_Belt_Vertical + "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND ("gtyp_HBW".Vertical_Axis.di_Actual_Position >= ("gtyp_HBW".di_PosBelt_Vertical - "gtyp_HBW".di_Offset_Pos_Belt_Vertical - "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND "gtyp_HBW".Vertical_Axis.x_Position_Reached THEN
	                "gtyp_HBW".Vertical_Axis.x_Start_Positioning := FALSE;
	            END_IF;
	            
	            IF NOT "gtyp_HBW".Horizontal_Axis.x_Referenced THEN
	                #li_StepCase := 120;
	            END_IF;
	            
	        120: //homed vertical/horizontal axis
	            
	            IF "gtyp_HBW".Horizontal_Axis.x_Referenced THEN
	                "gtyp_HBW".Horizontal_Axis.x_Reference := FALSE;
	            END_IF;
	            
	            IF ("gtyp_HBW".Vertical_Axis.di_Actual_Position <= ("gtyp_HBW".di_PosBelt_Vertical - "gtyp_HBW".di_Offset_Pos_Belt_Vertical + "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND ("gtyp_HBW".Vertical_Axis.di_Actual_Position >= ("gtyp_HBW".di_PosBelt_Vertical - "gtyp_HBW".di_Offset_Pos_Belt_Vertical - "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND "gtyp_HBW".Vertical_Axis.x_Position_Reached THEN
	                "gtyp_HBW".Vertical_Axis.x_Start_Positioning := FALSE;
	            END_IF;
	            
	            IF "gtyp_HBW".Horizontal_Axis.x_Referenced
	                AND ("gtyp_HBW".Vertical_Axis.di_Actual_Position <= ("gtyp_HBW".di_PosBelt_Vertical - "gtyp_HBW".di_Offset_Pos_Belt_Vertical + "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND ("gtyp_HBW".Vertical_Axis.di_Actual_Position >= ("gtyp_HBW".di_PosBelt_Vertical - "gtyp_HBW".di_Offset_Pos_Belt_Vertical - "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND "gtyp_HBW".Vertical_Axis.x_Position_Reached THEN
	                "gtyp_HBW".Horizontal_Axis.x_Reference := FALSE;
	                "gtyp_HBW".Vertical_Axis.x_Start_Positioning := FALSE;
	                #li_StepCase := 130;
	            END_IF;
	            
	        130: // Position vertical+offset/horizontal Belt
	            "gtyp_HBW".Horizontal_Axis.di_Target_Position := "gtyp_HBW".di_PosBelt_Horizontal;
	            "gtyp_HBW".Horizontal_Axis.x_Start_Positioning := TRUE;
	            
	            IF ("gtyp_HBW".Horizontal_Axis.di_Actual_Position <= ("gtyp_HBW".di_PosBelt_Horizontal + "gtyp_HBW".Horizontal_Axis.Config.di_Pos_Window))
	                AND ("gtyp_HBW".Horizontal_Axis.di_Actual_Position >= ("gtyp_HBW".di_PosBelt_Horizontal - "gtyp_HBW".Horizontal_Axis.Config.di_Pos_Window))
	                AND "gtyp_HBW".Horizontal_Axis.x_Position_Reached THEN
	                "gtyp_HBW".Horizontal_Axis.x_Start_Positioning := FALSE;
	            END_IF;
	            
	            IF ("gtyp_HBW".Horizontal_Axis.di_Actual_Position <= ("gtyp_HBW".di_PosBelt_Horizontal + "gtyp_HBW".Horizontal_Axis.Config.di_Pos_Window))
	                AND ("gtyp_HBW".Horizontal_Axis.di_Actual_Position >= ("gtyp_HBW".di_PosBelt_Horizontal - "gtyp_HBW".Horizontal_Axis.Config.di_Pos_Window))
	                AND "gtyp_HBW".Horizontal_Axis.x_Position_Reached THEN
	                "gtyp_HBW".Horizontal_Axis.x_Start_Positioning := FALSE;
	                #li_StepCase := 140;
	            END_IF;
	            
	        140: // Position cantilever Forward Belt
	            
	            "QX_HBW_M4_CantileverBackward_Q8" := FALSE;
	            "QX_HBW_M4_CantileverForward_Q7" := TRUE;
	            
	            #lx_Time_Error := TRUE;
	            
	            IF "IX_HBW_SwitchCantileverFront_I5" AND NOT "IX_HBW_SwitchCantileverBack_I6" THEN
	                "QX_HBW_M4_CantileverBackward_Q8" := FALSE;
	                "QX_HBW_M4_CantileverForward_Q7" := FALSE;
	                #lx_Time_Error := FALSE;
	                #li_StepCase := 150;
	            END_IF;
	            
	            // runtime error
	            IF #lfb_TON_Error.Q THEN
	                #li_Lights := 4;
	                #lx_Time_Error := FALSE;
	                "QX_HBW_M1_ConveyorBeltBackward_Q2" := FALSE;
	                "QX_HBW_M1_ConveyorBeltForward_Q1" := FALSE;
	                "gtyp_Interface_Dashboard".Subscribe.State_HBW.x_active := FALSE;
	                "gtyp_HBW".x_Error := TRUE;
	                "gtyp_HBW".s_ErrorMessage := 'HBW RUNTIME ERROR';
	                #li_StepCase := 0;
	            END_IF;
	            
	        150: // Position vertical Belt
	            "gtyp_HBW".Vertical_Axis.di_Target_Position := "gtyp_HBW".di_PosBelt_Vertical;
	            "gtyp_HBW".Vertical_Axis.x_Start_Positioning := TRUE;
	            
	            IF ("gtyp_HBW".Vertical_Axis.di_Actual_Position <= ("gtyp_HBW".di_PosBelt_Vertical + "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND ("gtyp_HBW".Vertical_Axis.di_Actual_Position >= ("gtyp_HBW".di_PosBelt_Vertical - "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND "gtyp_HBW".Vertical_Axis.x_Position_Reached THEN
	                "gtyp_HBW".Vertical_Axis.x_Start_Positioning := FALSE;
	                #li_StepCase := 160;
	            END_IF;
	            
	        160: // Start Conveyor Belt Forward
	            
	            #lx_Time_Error := TRUE;
	            
	            IF NOT "IX_HBW_LightBarrierInside_I2" THEN
	                "QX_HBW_M1_ConveyorBeltBackward_Q2" := FALSE;
	                "QX_HBW_M1_ConveyorBeltForward_Q1" := TRUE;
	                #lx_Time_Error := FALSE;
	                #li_StepCase := 170;
	            END_IF;
	            
	            // runtime error
	            IF #lfb_TON_Error.Q THEN
	                #li_Lights := 4;
	                #lx_Time_Error := FALSE;
	                "QX_HBW_M1_ConveyorBeltBackward_Q2" := FALSE;
	                "QX_HBW_M1_ConveyorBeltForward_Q1" := FALSE;
	                "gtyp_Interface_Dashboard".Subscribe.State_HBW.x_active := FALSE;
	                "gtyp_HBW".x_Error := TRUE;
	                "gtyp_HBW".s_ErrorMessage := 'HBW RUNTIME ERROR';
	                #li_StepCase := 0;
	            END_IF;
	            
	        170: //Run-on time reached Conveyor Belt Outside
	            
	            #lx_Time_Error := TRUE;
	            
	            IF #lfb_TON_ConveyerBelt_Out.Q THEN
	                "QX_HBW_M1_ConveyorBeltBackward_Q2" := FALSE;
	                "QX_HBW_M1_ConveyorBeltForward_Q1" := FALSE;
	                "gtyp_HBW".x_HBW_Container_Available := TRUE;
	                #lx_Time_Error := FALSE;
	                #li_StepCase := 180;
	            END_IF;
	            
	            // runtime error
	            IF #lfb_TON_Error.Q THEN
	                #li_Lights := 4;
	                #lx_Time_Error := FALSE;
	                "QX_HBW_M1_ConveyorBeltBackward_Q2" := FALSE;
	                "QX_HBW_M1_ConveyorBeltForward_Q1" := FALSE;
	                "gtyp_Interface_Dashboard".Subscribe.State_HBW.x_active := FALSE;
	                "gtyp_HBW".x_Error := TRUE;
	                "gtyp_HBW".s_ErrorMessage := 'HBW RUNTIME ERROR';
	                #li_StepCase := 0;
	            END_IF;
	            
	        180: // VGR picked up - outsource
	            
	            #li_Lights := 1;
	            
	            IF "gtyp_VGR".x_HBW_PickedUp AND "gtyp_VGR".x_HBW_Outsource THEN
	                "gtyp_VGR".Workpiece := "gtyp_HBW".Workpiece;
	                "gtyp_VGR".History := "gtyp_HBW".History;
	                "gtyp_HBW".Workpiece.s_id := '0';
	                "gtyp_HBW".Workpiece.s_state := '';
	                "gtyp_HBW".Workpiece.s_type := '';
	                FOR #ti_Counter := 1 TO 8 DO
	                    "gtyp_HBW".History[#ti_Counter].i_code := 0;
	                    "gtyp_HBW".History[#ti_Counter].ldt_ts := DT#1990-01-01-00:00:00;
	                END_FOR;
	                "gtyp_HBW".x_HBW_Container_Available := FALSE;
	                "gtyp_HBW".x_HBW_PickedUp_Accepted := TRUE;
	                
	                "gtyp_Interface_Dashboard".Subscribe.State_HBW.x_active := FALSE;
	                
	                #li_Lights := 2;
	                #li_StepCase := 190;
	                // VGR discard - storage
	            ELSIF "gtyp_VGR".x_HBW_Discards AND "gtyp_VGR".x_HBW_Storage THEN
	                "gtyp_Interface_Dashboard".Subscribe.State_HBW.x_active := TRUE;
	                "gtyp_HBW".Workpiece := "gtyp_VGR".Workpiece;
	                "gtyp_HBW".History := "gtyp_VGR".History;
	                "gtyp_HBW".x_HBW_Container_Available := FALSE;
	                "gtyp_HBW".x_HBW_Discards_Accepted := TRUE;
	                #lx_Storage := true;
	                
	                #li_Lights := 2;
	                #li_StepCase := 190;
	            END_IF;
	            
	        190: // Start Conveyor Belt Back
	            
	            IF NOT "gtyp_VGR".x_HBW_Discards AND NOT "gtyp_VGR".x_HBW_PickedUp THEN
	                "QX_HBW_M1_ConveyorBeltBackward_Q2" := TRUE;
	                "QX_HBW_M1_ConveyorBeltForward_Q1" := FALSE;
	                #li_StepCase := 200;
	            END_IF;
	            
	        200:  // Conveyor Belt inside reached
	            
	            #lx_Time_Error := TRUE;
	            
	            IF NOT "IX_HBW_LightBarrierInside_I2" THEN
	                "QX_HBW_M1_ConveyorBeltBackward_Q2" := FALSE;
	                "QX_HBW_M1_ConveyorBeltForward_Q1" := FALSE;
	                #lx_Time_Error := FALSE;
	                #li_StepCase := 210;
	            END_IF;
	            
	            // runtime error
	            IF #lfb_TON_Error.Q THEN
	                #li_Lights := 4;
	                #lx_Time_Error := FALSE;
	                "QX_HBW_M1_ConveyorBeltBackward_Q2" := FALSE;
	                "QX_HBW_M1_ConveyorBeltForward_Q1" := FALSE;
	                "gtyp_Interface_Dashboard".Subscribe.State_HBW.x_active := FALSE;
	                "gtyp_HBW".x_Error := TRUE;
	                "gtyp_HBW".s_ErrorMessage := 'HBW RUNTIME ERROR';
	                #li_StepCase := 0;
	            END_IF;
	            
	        210: // Position vertical+offset Belt
	            
	            "gtyp_HBW".Vertical_Axis.di_Target_Position := "gtyp_HBW".di_PosBelt_Vertical - "gtyp_HBW".di_Offset_Pos_Belt_Vertical;
	            "gtyp_HBW".Vertical_Axis.x_Start_Positioning := TRUE;
	            
	            IF ("gtyp_HBW".Vertical_Axis.di_Actual_Position <= ("gtyp_HBW".di_PosBelt_Vertical - "gtyp_HBW".di_Offset_Pos_Belt_Vertical + "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND ("gtyp_HBW".Vertical_Axis.di_Actual_Position >= ("gtyp_HBW".di_PosBelt_Vertical - "gtyp_HBW".di_Offset_Pos_Belt_Vertical - "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND "gtyp_HBW".Vertical_Axis.x_Position_Reached THEN
	                "gtyp_HBW".Vertical_Axis.x_Start_Positioning := FALSE;
	            END_IF;
	            
	            IF ("gtyp_HBW".Vertical_Axis.di_Actual_Position <= ("gtyp_HBW".di_PosBelt_Vertical - "gtyp_HBW".di_Offset_Pos_Belt_Vertical + "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND ("gtyp_HBW".Vertical_Axis.di_Actual_Position >= ("gtyp_HBW".di_PosBelt_Vertical - "gtyp_HBW".di_Offset_Pos_Belt_Vertical - "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND "gtyp_HBW".Vertical_Axis.x_Position_Reached THEN
	                "gtyp_HBW".Vertical_Axis.x_Start_Positioning := FALSE;
	                #li_StepCase := 220;
	            END_IF;
	            
	        220: // Position Cantilever back Belt   
	            "QX_HBW_M4_CantileverBackward_Q8" := TRUE;
	            "QX_HBW_M4_CantileverForward_Q7" := FALSE;
	            
	            IF NOT "IX_HBW_SwitchCantileverFront_I5" AND "IX_HBW_SwitchCantileverBack_I6" THEN
	                "QX_HBW_M4_CantileverBackward_Q8" := FALSE;
	                "QX_HBW_M4_CantileverForward_Q7" := FALSE;
	                #li_StepCase := 230;
	            END_IF;
	            
	        230: // Position vertical+offset/horizontal HBW
	            "gtyp_HBW".Horizontal_Axis.di_Target_Position := #ldi_PosRack_Horizontal;
	            "gtyp_HBW".Horizontal_Axis.x_Start_Positioning := TRUE;
	            "gtyp_HBW".Vertical_Axis.di_Target_Position := #ldi_PosRack_Vertical - "gtyp_HBW".di_Offset_Pos_Rack_Vertical;
	            "gtyp_HBW".Vertical_Axis.x_Start_Positioning := TRUE;
	            
	            IF ("gtyp_HBW".Horizontal_Axis.di_Actual_Position <= (#ldi_PosRack_Horizontal + "gtyp_HBW".Horizontal_Axis.Config.di_Pos_Window))
	                AND ("gtyp_HBW".Horizontal_Axis.di_Actual_Position >= (#ldi_PosRack_Horizontal - "gtyp_HBW".Horizontal_Axis.Config.di_Pos_Window))
	                AND "gtyp_HBW".Horizontal_Axis.x_Position_Reached THEN
	                "gtyp_HBW".Horizontal_Axis.x_Start_Positioning := FALSE;
	            END_IF;
	            
	            IF ("gtyp_HBW".Vertical_Axis.di_Actual_Position <= (#ldi_PosRack_Vertical - "gtyp_HBW".di_Offset_Pos_Rack_Vertical + "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND ("gtyp_HBW".Vertical_Axis.di_Actual_Position >= (#ldi_PosRack_Vertical - "gtyp_HBW".di_Offset_Pos_Rack_Vertical - "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND "gtyp_HBW".Vertical_Axis.x_Position_Reached THEN
	                "gtyp_HBW".Vertical_Axis.x_Start_Positioning := FALSE;
	            END_IF;
	            
	            IF ("gtyp_HBW".Horizontal_Axis.di_Actual_Position <= (#ldi_PosRack_Horizontal + "gtyp_HBW".Horizontal_Axis.Config.di_Pos_Window))
	                AND ("gtyp_HBW".Horizontal_Axis.di_Actual_Position >= (#ldi_PosRack_Horizontal - "gtyp_HBW".Horizontal_Axis.Config.di_Pos_Window))
	                AND "gtyp_HBW".Horizontal_Axis.x_Position_Reached
	                AND ("gtyp_HBW".Vertical_Axis.di_Actual_Position <= (#ldi_PosRack_Vertical - "gtyp_HBW".di_Offset_Pos_Rack_Vertical + "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND ("gtyp_HBW".Vertical_Axis.di_Actual_Position >= (#ldi_PosRack_Vertical - "gtyp_HBW".di_Offset_Pos_Rack_Vertical - "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND "gtyp_HBW".Vertical_Axis.x_Position_Reached THEN
	                "gtyp_HBW".Horizontal_Axis.x_Start_Positioning := FALSE;
	                "gtyp_HBW".Vertical_Axis.x_Start_Positioning := FALSE;
	                #li_StepCase := 240;
	            END_IF;
	            
	        240: // Position Cantilever Forward HBW
	            
	            "QX_HBW_M4_CantileverBackward_Q8" := FALSE;
	            "QX_HBW_M4_CantileverForward_Q7" := TRUE;
	            
	            IF "IX_HBW_SwitchCantileverFront_I5" AND NOT "IX_HBW_SwitchCantileverBack_I6" THEN
	                "QX_HBW_M4_CantileverBackward_Q8" := FALSE;
	                "QX_HBW_M4_CantileverForward_Q7" := FALSE;
	                #li_StepCase := 250;
	            END_IF;
	            
	        250: // Position vertical HBW
	            "gtyp_HBW".Vertical_Axis.di_Target_Position := #ldi_PosRack_Vertical;
	            "gtyp_HBW".Vertical_Axis.x_Start_Positioning := TRUE;
	            
	            IF ("gtyp_HBW".Vertical_Axis.di_Actual_Position <= (#ldi_PosRack_Vertical + "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND ("gtyp_HBW".Vertical_Axis.di_Actual_Position >= (#ldi_PosRack_Vertical - "gtyp_HBW".Vertical_Axis.Config.di_Pos_Window))
	                AND "gtyp_HBW".Vertical_Axis.x_Position_Reached THEN
	                IF #lx_Storage THEN
	                    #li_Return_LDT := RD_SYS_T(#ldt_MQTT);
	                    "gtyp_HBW".History[3].i_code := 300;
	                    "gtyp_HBW".History[3].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	                    "gtyp_HBW".Rack_Workpiece[#li_Counter_Act_Ver, #li_Counter_Act_Hor] := "gtyp_HBW".Workpiece;
	                    "gtyp_HBW".Rack_History[#li_Counter_Act_Ver, #li_Counter_Act_Hor].History := "gtyp_HBW".History;
	                    "gtyp_Interface_Dashboard".Subscribe.State_HBW.x_active := FALSE;
	                ELSE
	                    "gtyp_HBW".Rack_Workpiece[#li_Counter_Act_Ver, #li_Counter_Act_Hor].s_id := '0';
	                END_IF;
	                "gtyp_HBW".Vertical_Axis.x_Start_Positioning := FALSE;
	                "Simulation_Variables".HBW_Product_Bind := 0;
	                #li_StepCase := 260;
	            END_IF;
	            
	        260: // Position Cantilever Backward HBW
	            
	            "QX_HBW_M4_CantileverBackward_Q8" := TRUE;
	            "QX_HBW_M4_CantileverForward_Q7" := FALSE;
	            
	            IF NOT "IX_HBW_SwitchCantileverFront_I5" AND "IX_HBW_SwitchCantileverBack_I6" THEN
	                "QX_HBW_M4_CantileverBackward_Q8" := FALSE;
	                "QX_HBW_M4_CantileverForward_Q7" := FALSE;
	                #li_StepCase := 0;
	                #lx_Storage := FALSE;
	            END_IF;
	            // Statement section ELSE    
	        ELSE
	            ;
	    END_CASE;
	    
	    //Reset the information in the high-bay warehouse
	    IF "gtyp_Setup".x_Clean_Rack_HBW THEN
	        FOR #ti_Counter_Hor := 1 TO 3 DO
	            FOR #ti_Counter_Ver := 1 TO 3 DO
	                "gtyp_HBW".Rack_Workpiece[#ti_Counter_Ver, #ti_Counter_Hor].s_id := '0';
	                "gtyp_HBW".Rack_Workpiece[#ti_Counter_Ver, #ti_Counter_Hor].s_state := '';
	                "gtyp_HBW".Rack_Workpiece[#ti_Counter_Ver, #ti_Counter_Hor].s_type := '';
	                FOR #ti_Counter := 1 TO 8 DO
	                    "gtyp_HBW".Rack_History[#ti_Counter_Ver, #ti_Counter_Hor].History[#ti_Counter].i_code := 0;
	                    "gtyp_HBW".Rack_History[#ti_Counter_Ver, #ti_Counter_Hor].History[#ti_Counter].ldt_ts := DT#1990-01-01-00:00:00;
	                END_FOR;
	            END_FOR;
	        END_FOR;
	        "gtyp_Setup".x_Clean_Rack_HBW := FALSE;
	    END_IF;
	    
	    // reload PWM
	    "QW_HBW_PWM_ConveyorBelt_M1" := "gtyp_HBW"."i_PWM_ConveyorBelt";
	    "QW_HBW_PWM_Cantilever_M4" := "gtyp_HBW"."i_PWM_Cantilever";
	ELSE
	    FOR #ti_Counter_Hor := 1 TO 3 DO
	        FOR #ti_Counter_Ver := 1 TO 3 DO
	            IF "gtyp_HBW".Rack_Workpiece[#ti_Counter_Ver, #ti_Counter_Hor].s_id = '' THEN
	                "gtyp_HBW".Rack_Workpiece[#ti_Counter_Ver, #ti_Counter_Hor].s_id := '0';
	                "gtyp_HBW".Rack_Workpiece[#ti_Counter_Ver, #ti_Counter_Hor].s_state := '';
	                "gtyp_HBW".Rack_Workpiece[#ti_Counter_Ver, #ti_Counter_Hor].s_type := '';
	                FOR #ti_Counter := 1 TO 8 DO
	                    "gtyp_HBW".Rack_History[#ti_Counter_Ver, #ti_Counter_Hor].History[#ti_Counter].i_code := 0;
	                    "gtyp_HBW".Rack_History[#ti_Counter_Ver, #ti_Counter_Hor].History[#ti_Counter].ldt_ts := DT#1990-01-01-00:00:00;
	                END_FOR;
	            END_IF;
	        END_FOR;
	    END_FOR;
	    
	    "gtyp_HBW".x_Start_Park_Position := FALSE;
	    "gtyp_HBW".x_Park_Position_Reached := FALSE;
	    "gtyp_HBW".x_HBW_PickedUp_Accepted := FALSE;
	    "gtyp_HBW".x_HBW_Discards_Accepted := FALSE;
	    "gtyp_HBW".x_HBW_PickUp_Ready := FALSE;
	    "gtyp_HBW".x_HBW_Container_Available := FALSE;
	    "gtyp_HBW".x_Error := FALSE;
	    "gtyp_HBW".s_ErrorMessage := 'No error';
	    
	    #li_StepCase := 0;
	    
	    #li_Lights := 1;
	    #lx_Start_TON_Fill_HBW := TRUE;
	    #lx_Init := TRUE;
	END_IF;
END_FUNCTION_BLOCK

