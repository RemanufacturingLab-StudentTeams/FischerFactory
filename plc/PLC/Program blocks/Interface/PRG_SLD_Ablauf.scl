FUNCTION_BLOCK "PRG_SLD_Ablauf"
TITLE = Program Ablauf SLD
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : 'A.Schaefer'
VERSION : 0.0
   VAR 
      lx_Init { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      Location : Bool;
      lx_Start_TON_Wait { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      lx_Time_Error { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      lt_TON_Wait { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time;
      lx_Start_TON_State { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      ldt_MQTT { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Date_And_Time;
      li_Return_LDT { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      li_Lights { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      li_Lights_old { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      lw_ColorValueMin { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      li_CounterActual { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      lx_White { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      lx_Blue { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      lx_Red { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      li_StepCase { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      ls_Color { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;
      lfb_TOF_ConveyerBelt_Out {InstructionName := 'TOF_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TOF_TIME;
      lfb_TON_Wait {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
      lfb_TON_Error {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
      lfb_TON_State {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
      lfb_F_Trig_Counter {InstructionName := 'F_TRIG'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : F_TRIG;
      lfb_R_Trig_Counter {InstructionName := 'R_TRIG'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : R_TRIG;
   END_VAR


BEGIN
	IF #lx_Init THEN
	    
	    // Restart after set Positioning
	    IF "gtyp_Setup".x_Color_Sensor_Calibration THEN
	        #li_StepCase := 0;
	    END_IF;
	    
	    // wait time state
	    #lfb_TON_State(IN := NOT #lx_Start_TON_State,
	                   PT := T#500ms);
	    
	    // state of the SLD cyclically transmitted to the cloud
	    IF (#lfb_TON_State.Q OR (#li_Lights <> #li_Lights_old)) AND NOT #lx_Start_TON_State THEN
	        #li_Lights_old := #li_Lights;
	        #lx_Start_TON_State := TRUE;
	        #li_Return_LDT := RD_SYS_T(#ldt_MQTT);
	        // SLD info
	        "gtyp_Interface_Dashboard".Subscribe.State_SLD.ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_Interface_Dashboard".Subscribe.State_SLD.i_code := #li_Lights;
	        "gtyp_Interface_Dashboard".Subscribe.State_SLD.s_description := '';
	        "gtyp_Interface_Dashboard".Subscribe.State_SLD.s_station := 'sld';
	        "gtyp_Interface_Dashboard".Subscribe.State_SLD.s_target := '';
	        
	        // Workpiece
	        // UPDATING OF WORKIECE STATES WORKS IN HAPPY FLOW, BUT HAS NOT BEEN TESTED FOR EDGE CASES LIKE ERRORS AND PROBABLY WON'T HANDLE THEM PROPERLY. 
	        "gtyp_Interface_Dashboard".Subscribe.State_SLD.Workpiece := "gtyp_SLD".Workpiece;
	    END_IF;
	    
	    // restart wait time state
	    IF NOT #lfb_TON_State.Q AND #lx_Start_TON_State THEN
	        #lx_Start_TON_State := FALSE;
	    END_IF;
	    
	    // FB TON Wait
	    #lfb_TON_Wait(IN := #lx_Start_TON_Wait,
	                  PT := #lt_TON_Wait);
	    
	    // runtime monitoring error
	    #lfb_TON_Error(IN := #lx_Time_Error,
	                   PT := T#30s);
	    
	    // rising edge pulse counter
	    #lfb_R_Trig_Counter(CLK := "IX_SLD_PulseCounter_I1");
	    
	    // falling edge pulse counter
	    #lfb_F_Trig_Counter(CLK := "IX_SLD_PulseCounter_I1");
	    
	    // step chain SLD
	    CASE #li_StepCase OF
	            
	        0:  // Init
	            #lx_Start_TON_Wait := FALSE;
	            #lx_Time_Error := FALSE;
	            "gtyp_SLD".Workpiece.Workpiece_States.x_onTransportBelt := FALSE;
	            "gtyp_SLD".Workpiece.Workpiece_States.x_ColorObserved := FALSE;
	            //#li_Lights := 1;
	            
	            IF NOT "gtyp_SLD".x_Error AND NOT "gtyp_Setup".x_Color_Sensor_Calibration THEN
	                #li_StepCase := 10;
	            END_IF;
	            
	        10: // turn-on Compressor and wait sequence 
	            #li_Lights := 2;
	            "QX_SLD_Compressor_Q2" := TRUE;
	            
	            #lx_Start_TON_Wait := TRUE;
	            #lt_TON_Wait := T#1000ms;
	            
	            IF #lfb_TON_Wait.Q THEN
	                #lx_Start_TON_Wait := FALSE;
	                #li_StepCase := 20;
	            END_IF;
	            
	        20:  // reset Ejectors
	            "QX_SLD_ValveFirstEjectorWhite_Q3" := FALSE;
	            "QX_SLD_ValveSecondEjectorRed_Q4" := FALSE;
	            "QX_SLD_ValveThirdEjectorBlue_Q5" := FALSE;
	            "QX_SLD_M1_ConveyorBelt_Q1" := FALSE;
	            
	            #lx_Start_TON_Wait := TRUE;
	            #lt_TON_Wait := T#2000ms;
	            
	            IF #lfb_TON_Wait.Q THEN
	                #lx_Start_TON_Wait := FALSE;
	                #li_StepCase := 30;
	            END_IF;
	            
	        30: // turn-off Compressor 
	            
	            "QX_SLD_Compressor_Q2" := FALSE;
	            
	            #li_StepCase := 40;
	            
	        40: // start belt if Light barrier I2 active
	            
	            #li_Lights := 1;
	            IF NOT "IX_SLD_LightBarrierInlet_I2" THEN
	                #Location := TRUE;
	                
	                "gtyp_Interface_Dashboard".Subscribe.State_SLD.x_active := TRUE;
	                
	                // Update workpiece state to on transport belt and update timestamp
	                "gtyp_SLD".Workpiece.Workpiece_States.x_onTransportBelt := TRUE;
	                "gtyp_SLD".Workpiece.Workpiece_States.ldt_TransportBelt := DT_TO_LDT(#ldt_MQTT);
	                
	                #li_Lights := 2;
	                "QX_SLD_Compressor_Q2" := TRUE;
	                "QX_SLD_M1_ConveyorBelt_Q1" := TRUE;
	                #lw_ColorValueMin := 40000;
	                #li_CounterActual := 0;
	                #lx_Blue := FALSE;
	                #lx_Red := FALSE;
	                #lx_White := FALSE;
	                #li_StepCase := 50;
	            END_IF;
	            
	        50: // take the min Value of the Color sensor
	            IF #lw_ColorValueMin > "IW_SLD_ColorSensor_A4" THEN
	                #lw_ColorValueMin := "IW_SLD_ColorSensor_A4";
	            END_IF;
	            
	            #lx_Time_Error := TRUE;
	            
	            // Stop when light barrier I3 on 
	            IF NOT "IX_SLD_LightBarrierBehindColorSensor_I3" THEN
	                #lx_Time_Error := FALSE;
	                #li_StepCase := 60;
	            END_IF;
	            
	            // runtime error
	            IF #lfb_TON_Error.Q THEN
	                #li_Lights := 4;
	                #lx_Time_Error := FALSE;
	                "QX_SLD_Compressor_Q2" := FALSE;
	                "QX_SLD_M1_ConveyorBelt_Q1" := FALSE;
	                "gtyp_Interface_Dashboard".Subscribe.State_SLD.x_active := FALSE;
	                // Update workpiece state to not on transport belt
	                "gtyp_SLD".Workpiece.Workpiece_States.x_onTransportBelt := FALSE;
	                "gtyp_SLD".x_Error := TRUE;
	                #li_StepCase := 0;
	            END_IF;
	            
	        60: // analyze color
	            
	            IF #lw_ColorValueMin >= "gtyp_SLD".w_Threshold_Red_Blue THEN
	                #lx_Blue := TRUE;
	                
	                // Update observed color and timestamp in workpiece states
	                "gtyp_SLD".Workpiece.Workpiece_States.x_ColorObserved := TRUE;
	                "gtyp_SLD".Workpiece.Workpiece_States.s_ObservedColor := 'BLUE';
	                "gtyp_SLD".Workpiece.Workpiece_States.ldt_Color := DT_TO_LDT(#ldt_MQTT);
	                
	            ELSIF #lw_ColorValueMin <= "gtyp_SLD".w_Threshold_White_Red THEN
	                #lx_White := TRUE;
	                
	                // Update observed color and timestamp in workpiece states
	                "gtyp_SLD".Workpiece.Workpiece_States.x_ColorObserved := TRUE;
	                "gtyp_SLD".Workpiece.Workpiece_States.s_ObservedColor := 'WHITE';
	                "gtyp_SLD".Workpiece.Workpiece_States.ldt_Color := DT_TO_LDT(#ldt_MQTT);
	                
	            ELSIF #lw_ColorValueMin > "gtyp_SLD".w_Threshold_White_Red AND #lw_ColorValueMin < "gtyp_SLD".w_Threshold_Red_Blue THEN
	                #lx_Red := TRUE;
	                
	                // Update observed color and timestamp in workpiece states
	                "gtyp_SLD".Workpiece.Workpiece_States.x_ColorObserved := TRUE;
	                "gtyp_SLD".Workpiece.Workpiece_States.s_ObservedColor := 'RED';
	                "gtyp_SLD".Workpiece.Workpiece_States.ldt_Color := DT_TO_LDT(#ldt_MQTT);
	                
	            END_IF;
	            
	            // actual counter
	            IF #lfb_R_Trig_Counter.Q OR #lfb_F_Trig_Counter.Q THEN
	                #li_CounterActual := #li_CounterActual + 1;
	            END_IF;
	            
	            // Reached counter value and color set Ejector
	            IF (#li_CounterActual = "gtyp_SLD".i_CounterValue_Blue) AND #lx_Blue THEN
	                "QX_SLD_ValveThirdEjectorBlue_Q5" := TRUE;
	                #li_Return_LDT := RD_SYS_T(#ldt_MQTT);
	                "gtyp_SLD".Workpiece.s_state := 'PROCESSED';
	                "gtyp_SLD".History[7].i_code := 700;
	                "gtyp_SLD".History[7].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	                
	                // Update workpiece state to not on transport belt and update timestamp
	                "gtyp_SLD".Workpiece.Workpiece_States.x_onTransportBelt := FALSE;
	                "gtyp_SLD".Workpiece.Workpiece_States.ldt_TransportBelt := DT_TO_LDT(#ldt_MQTT);
	                
	                // Reset x_ColorObserved
	                "gtyp_SLD".Workpiece.Workpiece_States.x_ColorObserved := FALSE;
	                
	                #li_StepCase := 70;
	            ELSIF (#li_CounterActual = "gtyp_SLD".i_CounterValue_White) AND #lx_White THEN
	                "QX_SLD_ValveFirstEjectorWhite_Q3" := TRUE;
	                #li_Return_LDT := RD_SYS_T(#ldt_MQTT);
	                "gtyp_SLD".Workpiece.s_state := 'PROCESSED';
	                "gtyp_SLD".History[7].i_code := 700;
	                "gtyp_SLD".History[7].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	                
	                // Update workpiece state to not on transport belt and update timestamp
	                "gtyp_SLD".Workpiece.Workpiece_States.x_onTransportBelt := FALSE;
	                "gtyp_SLD".Workpiece.Workpiece_States.ldt_TransportBelt := DT_TO_LDT(#ldt_MQTT);
	                
	                #li_StepCase := 70;
	            ELSIF (#li_CounterActual = "gtyp_SLD".i_CounterValue_Red) AND #lx_Red THEN
	                "QX_SLD_ValveSecondEjectorRed_Q4" := TRUE;
	                #li_Return_LDT := RD_SYS_T(#ldt_MQTT);
	                "gtyp_SLD".Workpiece.s_state := 'PROCESSED';
	                "gtyp_SLD".History[7].i_code := 700;
	                "gtyp_SLD".History[7].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	                
	                // Update workpiece state to not on transport belt and update timestamp
	                "gtyp_SLD".Workpiece.Workpiece_States.x_onTransportBelt := FALSE;
	                "gtyp_SLD".Workpiece.Workpiece_States.ldt_TransportBelt := DT_TO_LDT(#ldt_MQTT);
	                
	                #li_StepCase := 70;
	            ELSIF (#li_CounterActual = 80) THEN
	                #li_Lights := 4;
	                "gtyp_SLD".x_Error := TRUE;
	                
	                // Update workpiece state to not on transport belt and update timestamp
	                "gtyp_SLD".Workpiece.Workpiece_States.x_onTransportBelt := FALSE;
	                "gtyp_SLD".Workpiece.Workpiece_States.ldt_TransportBelt := DT_TO_LDT(#ldt_MQTT);
	                #li_StepCase := 70;
	            END_IF;
	            
	        70: // wait sequence
	            #lx_Start_TON_Wait := TRUE;
	            #lt_TON_Wait := T#500ms;
	            
	            IF #lfb_TON_Wait.Q THEN
	                "QX_SLD_ValveThirdEjectorBlue_Q5" := FALSE;
	                "QX_SLD_ValveFirstEjectorWhite_Q3" := FALSE;
	                "QX_SLD_ValveSecondEjectorRed_Q4" := FALSE;
	                #lx_Start_TON_Wait := FALSE;
	                #li_StepCase := 80;
	            END_IF;
	            
	        80: // wait sequence
	            
	            #lx_Start_TON_Wait := TRUE;
	            #lt_TON_Wait := T#2000ms;
	            
	            IF #lfb_TON_Wait.Q THEN
	                "QX_SLD_Compressor_Q2" := FALSE;
	                #lx_Start_TON_Wait := FALSE;
	                #li_StepCase := 90;
	            END_IF;
	            
	        90: // Stop belt
	            "QX_SLD_M1_ConveyorBelt_Q1" := FALSE;
	            #li_StepCase := 40;
	            // Statement section ELSE
	        ELSE
	            ;
	    END_CASE;
	    
	ELSE
	    "gtyp_SLD".x_Error := FALSE;
	    #li_Lights := 1;
	    #lx_Init := TRUE;
	END_IF;
END_FUNCTION_BLOCK

