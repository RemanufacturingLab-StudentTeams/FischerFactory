FUNCTION_BLOCK "FB_Axis_Auto"
TITLE = Functionblock Axis
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : 'A.Schaefer'
VERSION : 0.0
   VAR_INPUT 
      ini_Axis { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      indi_Increment { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      inx_Ref_Switch { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      inx_Start_Positioning { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      inx_Referencing { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      ini_PWM { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      indi_Target_Position { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
   END_VAR

   VAR_OUTPUT 
      outx_Referenced { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      outx_Position_Reached { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      outx_Motor_Pos { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      outx_Motor_Neg { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      outi_Motor_PWM { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      outdi_Actual_Position { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
   END_VAR

   VAR_IN_OUT 
      inouttyp_Config : "typ_Axis_Data";
      inouttyp_Setup : "typ_SetupAxis";
   END_VAR

   VAR 
      li_StepCaseSetup { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      li_StepCase { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      lx_Init { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      lx_Motor_Neg { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      lx_Motor_Pos { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      lx_Start_TON_Wait { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      li_PWM { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      ldi_ValueStep { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      ldi_Actual_Position { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      ldi_Actual_Position_Old { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      lfb_R_Trig_Setup {InstructionName := 'R_TRIG'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : R_TRIG;
      lfb_R_Trig_Referencing {InstructionName := 'R_TRIG'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : R_TRIG;
      lfb_TON_Wait {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
   END_VAR

   VAR_TEMP 
      ti_Target_PWM : Int;
   END_VAR

   VAR CONSTANT 
      ci_Min_PWM : Int := 400;
      ci_Max_PWM : Int := 900;
      ci_Acceleration : Int := 7;
   END_VAR


BEGIN
	IF #lx_Init THEN
	    
	    // rising edge set up axis
	    #lfb_R_Trig_Setup(CLK := #inouttyp_Setup.x_Setup_Activ);
	    
	    //Reload when switching to set up
	    IF #lfb_R_Trig_Setup.Q THEN
	        #inouttyp_Setup.di_LoopValue := #inouttyp_Config.di_Loop_Value;
	        #inouttyp_Setup.di_Ref_Pos :=
	        #inouttyp_Setup.di_Actual_Ref_Pos := #inouttyp_Config.di_Ref_Pos;
	        #inouttyp_Setup.di_Soft_End_Pos_Neg :=
	        #inouttyp_Setup.di_Actual_Soft_End_Pos_Neg := #inouttyp_Config.di_Neg_Soft_Switch;
	        #inouttyp_Setup.di_Soft_End_Pos_Pos :=
	        #inouttyp_Setup.di_Actual_Soft_End_Pos_Pos := #inouttyp_Config.di_Pos_Soft_Switch;
	        #inouttyp_Setup.i_PWM := #ini_PWM;
	        #inouttyp_Setup.x_Approach_Ref_Pos := FALSE;
	        #inouttyp_Setup.x_Approach_Target_Pos := FALSE;
	        #inouttyp_Setup.x_Axis_Neg := FALSE;
	        #inouttyp_Setup.x_Axis_Pos := FALSE;
	        #inouttyp_Setup.x_Set_Ref_Pos := FALSE;
	        #inouttyp_Setup.x_Set_Soft_End_Pos := FALSE;
	    END_IF;
	    
	    #ldi_Actual_Position := #indi_Increment;
	    
	    //rising edge referencing
	    #lfb_R_Trig_Referencing(CLK := #inx_Referencing);
	    
	    //waiting period
	    #lfb_TON_Wait(IN := #lx_Start_TON_Wait,
	                  PT := T#200ms);
	    
	    (**********************************)
	    (******   set up step chain   *****)
	    (**********************************)
	    IF #inouttyp_Setup.i_AxisSelection = #ini_Axis AND #inouttyp_Setup.x_Setup_Activ THEN
	        IF #inouttyp_Setup.x_Approach_Ref_Pos THEN
	            #inouttyp_Setup.i_Function := 10;
	        END_IF;
	        
	        CASE #inouttyp_Setup.i_Function OF
	                
	            0:  // automatic
	                #ldi_Actual_Position_Old := 0;
	                #inouttyp_Setup.x_Approach_Ref_Pos := FALSE;
	                #lx_Start_TON_Wait := FALSE;
	                
	            10: // homing
	                IF #inouttyp_Setup.x_Approach_Ref_Pos THEN
	                    IF NOT #inx_Ref_Switch THEN
	                        #lx_Motor_Neg := TRUE;
	                        #lx_Motor_Pos := FALSE;
	                        #outx_Referenced := FALSE;
	                    END_IF;
	                    
	                    IF #inx_Ref_Switch THEN
	                        #lx_Motor_Neg := TRUE;
	                        #lx_Motor_Pos := TRUE;
	                        
	                        IF #ldi_Actual_Position = #inouttyp_Config.di_Ref_Pos THEN
	                            #inouttyp_Setup.x_Approach_Ref_Pos := FALSE;
	                            #lx_Motor_Neg := FALSE;
	                            #lx_Motor_Pos := FALSE;
	                            #outx_Referenced := TRUE;
	                        END_IF;
	                    END_IF;
	                END_IF;
	                
	            20:  // tap
	                #lx_Motor_Neg := #inouttyp_Setup.x_Axis_Neg AND NOT #inx_Ref_Switch AND NOT (#ldi_Actual_Position <= #inouttyp_Setup.di_Soft_End_Pos_Neg);
	                #lx_Motor_Pos := #inouttyp_Setup.x_Axis_Pos AND NOT #lx_Motor_Neg AND NOT (#ldi_Actual_Position >= #inouttyp_Setup.di_Soft_End_Pos_Pos);
	                
	            30:  // tap with increment
	                #ldi_Actual_Position_Old := #ldi_Actual_Position;
	                
	                // positiv
	                IF #inouttyp_Setup.x_Axis_Pos AND NOT ((#ldi_Actual_Position + #inouttyp_Setup.w_Increment + #inouttyp_Setup.di_LoopValue) >= #inouttyp_Setup.di_Soft_End_Pos_Pos) THEN
	                    #lx_Motor_Neg := FALSE;
	                    #lx_Motor_Pos := TRUE;
	                    #ldi_ValueStep := #ldi_Actual_Position_Old + #inouttyp_Setup.w_Increment;
	                    
	                    // without loop
	                    IF (#inouttyp_Setup.di_LoopValue = 0) THEN
	                        #inouttyp_Setup.i_Function := 36;
	                    ELSE
	                        #inouttyp_Setup.i_Function := 31;
	                    END_IF;
	                    // negativ
	                ELSIF #inouttyp_Setup.x_Axis_Neg AND NOT ((#ldi_Actual_Position - #inouttyp_Setup.w_Increment) <= #inouttyp_Config.di_Neg_Soft_Switch) THEN
	                    #lx_Motor_Neg := TRUE;
	                    #lx_Motor_Pos := FALSE;
	                    #ldi_ValueStep := #ldi_Actual_Position_Old - #inouttyp_Setup.w_Increment;
	                    #inouttyp_Setup.i_Function := 34;
	                END_IF;
	                
	            31: // with loop
	                IF ((#ldi_Actual_Position >= (#ldi_ValueStep + #inouttyp_Setup.di_LoopValue - #inouttyp_Config.di_Pos_Window)) = 0) THEN
	                    #lx_Motor_Neg := TRUE;
	                    #lx_Motor_Pos := TRUE;
	                    #inouttyp_Setup.i_Function := 32;
	                END_IF;
	                
	            32: // wait sequence
	                #lx_Start_TON_Wait := TRUE;
	                
	                IF #lfb_TON_Wait.Q THEN
	                    #lx_Motor_Neg := FALSE;
	                    #lx_Motor_Pos := FALSE;
	                    #lx_Start_TON_Wait := FALSE;
	                    #inouttyp_Setup.i_Function := 33;
	                END_IF;
	                
	            33: // change direction
	                #lx_Motor_Neg := TRUE;
	                #lx_Motor_Pos := FALSE;
	                #inouttyp_Setup.i_Function := 34;
	                
	            34: // position reached negativ
	                IF (#ldi_Actual_Position <= (#ldi_ValueStep + #inouttyp_Config.di_Pos_Window))
	                    AND (#ldi_Actual_Position >= (#ldi_ValueStep - #inouttyp_Config.di_Pos_Window)) THEN
	                    #lx_Motor_Neg := TRUE;
	                    #lx_Motor_Pos := TRUE;
	                    #inouttyp_Setup.i_Function := 35;
	                END_IF;
	                
	            35: // wait sequence
	                #lx_Start_TON_Wait := TRUE;
	                
	                IF #lfb_TON_Wait.Q THEN
	                    #lx_Motor_Neg := FALSE;
	                    #lx_Motor_Pos := FALSE;
	                    #lx_Start_TON_Wait := FALSE;
	                    #inouttyp_Setup.x_Axis_Neg := FALSE;
	                    #inouttyp_Setup.x_Axis_Pos := FALSE;
	                    #inouttyp_Setup.i_Function := 30;
	                END_IF;
	                
	                
	            36: // position reached positiv
	                IF (#ldi_Actual_Position <= (#ldi_ValueStep + #inouttyp_Config.di_Pos_Window))
	                    AND (#ldi_Actual_Position >= (#ldi_ValueStep - #inouttyp_Config.di_Pos_Window)) THEN
	                    #lx_Motor_Neg := TRUE;
	                    #lx_Motor_Pos := TRUE;
	                    #inouttyp_Setup.i_Function := 37;
	                END_IF;
	                
	            37: // wait sequence
	                #lx_Start_TON_Wait := TRUE;
	                
	                IF #lfb_TON_Wait.Q THEN
	                    #lx_Motor_Neg := FALSE;
	                    #lx_Motor_Pos := FALSE;
	                    #lx_Start_TON_Wait := FALSE;
	                    #inouttyp_Setup.x_Axis_Neg := FALSE;
	                    #inouttyp_Setup.x_Axis_Pos := FALSE;
	                    #inouttyp_Setup.i_Function := 30;
	                END_IF;
	                
	            40: // approach position
	                IF #inouttyp_Setup.x_Approach_Target_Pos THEN
	                    // positiv
	                    IF (#inouttyp_Setup.di_Target_Position > #ldi_Actual_Position) AND NOT ((#inouttyp_Setup.di_Target_Position + #inouttyp_Setup.di_LoopValue) >= #inouttyp_Setup.di_Soft_End_Pos_Pos) THEN
	                        #lx_Motor_Neg := FALSE;
	                        #lx_Motor_Pos := TRUE;
	                        // without loop
	                        IF (#inouttyp_Setup.di_LoopValue = 0) THEN
	                            #inouttyp_Setup.i_Function := 46;
	                        ELSE
	                            #inouttyp_Setup.i_Function := 41;
	                        END_IF;
	                        // negativ
	                    ELSIF ((#inouttyp_Setup.di_Target_Position < #ldi_Actual_Position) AND NOT (#inouttyp_Setup.di_Target_Position <= #inouttyp_Config.di_Neg_Soft_Switch)) THEN
	                        #lx_Motor_Neg := TRUE;
	                        #lx_Motor_Pos := FALSE;
	                        #inouttyp_Setup.i_Function := 44;
	                    ELSIF (#inouttyp_Setup.di_Target_Position = #ldi_Actual_Position) THEN
	                        #inouttyp_Setup.i_Function := 46;
	                    END_IF;
	                    
	                END_IF;
	                
	            41: // with loop
	                IF (#ldi_Actual_Position >= (#inouttyp_Setup.di_Target_Position + #inouttyp_Setup.di_LoopValue - #inouttyp_Config.di_Pos_Window)) THEN
	                    #lx_Motor_Neg := TRUE;
	                    #lx_Motor_Pos := TRUE;
	                    #inouttyp_Setup.i_Function := 42;
	                END_IF;
	                
	            42: // wait sequence
	                #lx_Start_TON_Wait := TRUE;
	                
	                IF #lfb_TON_Wait.Q THEN
	                    #lx_Motor_Neg := FALSE;
	                    #lx_Motor_Pos := FALSE;
	                    #lx_Start_TON_Wait := FALSE;
	                    #inouttyp_Setup.i_Function := 43;
	                END_IF;
	                
	            43: // change direction
	                #lx_Motor_Neg := TRUE;
	                #lx_Motor_Pos := FALSE;
	                #inouttyp_Setup.i_Function := 44;
	                
	            44: // position reached negativ
	                IF (#ldi_Actual_Position <= (#inouttyp_Setup.di_Target_Position + #inouttyp_Config.di_Pos_Window))
	                    AND (#ldi_Actual_Position >= (#inouttyp_Setup.di_Target_Position - #inouttyp_Config.di_Pos_Window)) THEN
	                    #lx_Motor_Neg := TRUE;
	                    #lx_Motor_Pos := TRUE;
	                    #inouttyp_Setup.i_Function := 45;
	                END_IF;
	                
	            45: // wait sequence
	                #lx_Start_TON_Wait := TRUE;
	                
	                IF #lfb_TON_Wait.Q THEN
	                    #lx_Motor_Neg := FALSE;
	                    #lx_Motor_Pos := FALSE;
	                    #lx_Start_TON_Wait := FALSE;
	                    #inouttyp_Setup.x_Axis_Neg := FALSE;
	                    #inouttyp_Setup.x_Axis_Pos := FALSE;
	                    #inouttyp_Setup.i_Function := 40;
	                END_IF;
	                
	            46: //  position reached positiv
	                IF (#ldi_Actual_Position <= (#inouttyp_Setup.di_Target_Position + #inouttyp_Config.di_Pos_Window))
	                    AND (#ldi_Actual_Position >= (#inouttyp_Setup.di_Target_Position - #inouttyp_Config.di_Pos_Window)) THEN
	                    #lx_Motor_Neg := TRUE;
	                    #lx_Motor_Pos := TRUE;
	                    #inouttyp_Setup.i_Function := 47;
	                END_IF;
	                
	            47:  // wait sequence
	                #lx_Start_TON_Wait := TRUE;
	                
	                IF #lfb_TON_Wait.Q THEN
	                    #lx_Motor_Neg := FALSE;
	                    #lx_Motor_Pos := FALSE;
	                    #lx_Start_TON_Wait := FALSE;
	                    #inouttyp_Setup.x_Approach_Target_Pos := FALSE;
	                    #inouttyp_Setup.i_Function := 40;
	                END_IF;
	            ELSE  // Statement section ELSE
	                ;
	        END_CASE;
	        
	        // set reference point
	        IF #inouttyp_Setup.x_Set_Ref_Pos THEN
	            #inouttyp_Setup.di_Actual_Ref_Pos :=
	            #inouttyp_Config.di_Ref_Pos := #inouttyp_Setup.di_Ref_Pos;
	            #inouttyp_Setup.x_Set_Ref_Pos := FALSE;
	        END_IF;
	        
	        // set software end position
	        IF #inouttyp_Setup.x_Set_Soft_End_Pos THEN
	            #inouttyp_Setup.di_Actual_Soft_End_Pos_Neg :=
	            #inouttyp_Config.di_Neg_Soft_Switch := #inouttyp_Setup.di_Soft_End_Pos_Neg;
	            #inouttyp_Setup.di_Actual_Soft_End_Pos_Pos :=
	            #inouttyp_Config.di_Pos_Soft_Switch := #inouttyp_Setup.di_Soft_End_Pos_Pos;
	            #inouttyp_Setup.x_Set_Soft_End_Pos := FALSE;
	        END_IF;
	        
	        // reload PWM
	        #li_PWM := #inouttyp_Setup.i_PWM;
	        
	        // reload actual position
	        #inouttyp_Setup.di_ActualPosition := #ldi_Actual_Position;
	        
	        (************************************)
	        (******   position step chain   *****)
	        (************************************)
	    ELSIF NOT #inouttyp_Setup.x_Setup_Activ THEN
	        
	        // rising edge set up axis
	        IF #lfb_R_Trig_Referencing.Q THEN
	            #li_StepCase := 0;
	        END_IF;
	        
	        CASE #li_StepCase OF
	                
	            0:  // init
	                #lx_Start_TON_Wait := FALSE;
	                
	                IF #inx_Referencing THEN
	                    #li_StepCase := 10;
	                    #outx_Position_Reached := FALSE;
	                    #outx_Referenced := FALSE;
	                ELSIF #inx_Start_Positioning THEN
	                    #li_StepCase := 20;
	                    #outx_Position_Reached := FALSE;
	                END_IF;
	                
	            10: // homing
	                IF NOT #inx_Ref_Switch THEN
	                    #lx_Motor_Neg := TRUE;
	                    #lx_Motor_Pos := FALSE;
	                END_IF;
	                
	                IF #inx_Ref_Switch THEN
	                    #lx_Motor_Neg := TRUE;
	                    #lx_Motor_Pos := TRUE;
	                    
	                    IF #inx_Ref_Switch THEN
	                        IF #ldi_Actual_Position = #inouttyp_Config.di_Ref_Pos THEN
	                            #lx_Motor_Neg := FALSE;
	                            #lx_Motor_Pos := FALSE;
	                            #outx_Referenced := TRUE;
	                            #li_StepCase := 11;
	                        END_IF;
	                    END_IF;
	                END_IF;
	                
	            11: // wait not referencing
	                IF NOT #inx_Referencing THEN
	                    #li_StepCase := 0;
	                END_IF;
	                
	            20: // approach position
	                // positiv
	                IF (#indi_Target_Position > #ldi_Actual_Position) AND NOT ((#indi_Target_Position + #inouttyp_Config.di_Loop_Value) >= #inouttyp_Config.di_Pos_Soft_Switch) THEN
	                    #lx_Motor_Neg := FALSE;
	                    #lx_Motor_Pos := TRUE;
	                    //without loop
	                    IF (#inouttyp_Config.di_Loop_Value = 0) THEN
	                        #li_StepCase := 26;
	                    ELSE
	                        #li_StepCase := 21;
	                    END_IF;
	                    // negativ
	                ELSIF ((#indi_Target_Position < #ldi_Actual_Position) AND NOT (#indi_Target_Position <= #inouttyp_Config.di_Neg_Soft_Switch)) THEN
	                    #lx_Motor_Neg := TRUE;
	                    #lx_Motor_Pos := FALSE;
	                    #li_StepCase := 24;
	                ELSIF (#indi_Target_Position = #ldi_Actual_Position) THEN
	                    #li_StepCase := 26;
	                END_IF;
	                
	            21: // with loop
	                IF (#ldi_Actual_Position >= (#indi_Target_Position + #inouttyp_Config.di_Loop_Value - #inouttyp_Config.di_Pos_Window)) THEN
	                    #lx_Motor_Neg := TRUE;
	                    #lx_Motor_Pos := TRUE;
	                    #li_StepCase := 22;
	                END_IF;
	                
	            22: // wait sequence
	                #lx_Start_TON_Wait := TRUE;
	                
	                IF #lfb_TON_Wait.Q THEN
	                    #lx_Motor_Neg := FALSE;
	                    #lx_Motor_Pos := FALSE;
	                    #lx_Start_TON_Wait := FALSE;
	                    #inouttyp_Setup.i_Function := 23;
	                END_IF;
	                
	            23: // change direction
	                #lx_Motor_Neg := TRUE;
	                #lx_Motor_Pos := FALSE;
	                #li_StepCase := 24;
	                
	            24: // position reached negativ
	                IF (#ldi_Actual_Position <= (#indi_Target_Position + #inouttyp_Config.di_Pos_Window))
	                    AND (#ldi_Actual_Position >= (#indi_Target_Position - #inouttyp_Config.di_Pos_Window)) THEN
	                    #lx_Motor_Neg := TRUE;
	                    #lx_Motor_Pos := TRUE;
	                    #li_StepCase := 25;
	                END_IF;
	                
	            25: // wait sequence
	                #lx_Start_TON_Wait := TRUE;
	                
	                IF #lfb_TON_Wait.Q THEN
	                    #lx_Motor_Neg := FALSE;
	                    #lx_Motor_Pos := FALSE;
	                    #lx_Start_TON_Wait := FALSE;
	                    #outx_Position_Reached := TRUE;
	                    #li_StepCase := 28;
	                END_IF;
	                
	            26: // position reached positiv
	                IF (#ldi_Actual_Position <= (#indi_Target_Position + #inouttyp_Config.di_Pos_Window))
	                    AND (#ldi_Actual_Position >= (#indi_Target_Position - #inouttyp_Config.di_Pos_Window)) THEN
	                    #lx_Motor_Neg := TRUE;
	                    #lx_Motor_Pos := TRUE;
	                    #li_StepCase := 27;
	                END_IF;
	                
	            27: // wait sequence
	                #lx_Start_TON_Wait := TRUE;
	                
	                IF #lfb_TON_Wait.Q THEN
	                    #lx_Motor_Neg := FALSE;
	                    #lx_Motor_Pos := FALSE;
	                    #lx_Start_TON_Wait := FALSE;
	                    #outx_Position_Reached := TRUE;
	                    #li_StepCase := 28;
	                END_IF;
	                
	            28: // wait not start positioning
	                IF NOT #inx_Start_Positioning THEN
	                    #li_StepCase := 0;
	                END_IF;
	                // statement section ELSE    
	            ELSE
	                ;
	        END_CASE;
	        
	        IF #ini_PWM = -1 THEN
	            //Automatically calculate the PWM value
	            IF #inx_Referencing THEN
	                //If the position is less then 0 slow the axis down
	                IF #ldi_Actual_Position <= 0 THEN
	                    //If the position is less than 0, position is likely not known, so slow down
	                    #li_PWM := #ci_Min_PWM;
	                ELSE
	                    //When referencing the target position is 0, so the position can be used as speed
	                    #ti_Target_PWM := DINT_TO_INT(MIN_DINT(IN1 := #ldi_Actual_Position + #ci_Min_PWM, IN2 := #ci_Max_PWM));
	                    //If the desired speed is greater than current, accelerate
	                    IF #ti_Target_PWM > #li_PWM THEN
	                        #li_PWM := #li_PWM + #ci_Acceleration;
	                    ELSE
	                        #li_PWM := #ti_Target_PWM;
	                    END_IF;
	                END_IF;
	            ELSE
	                //When regular moving, use the distance as PWM
	                #ti_Target_PWM := DINT_TO_INT(MIN_DINT(IN1 := ABS_DINT(#ldi_Actual_Position - #indi_Target_Position) + #ci_Min_PWM, IN2 := #ci_Max_PWM));
	                //If the desired speed is greater than current, accelerate
	                IF #ti_Target_PWM > #li_PWM THEN
	                    #li_PWM := #li_PWM + #ci_Acceleration;
	                ELSE
	                    #li_PWM := #ti_Target_PWM;
	                END_IF;
	            END_IF;
	        ELSE
	            #li_PWM := #ini_PWM;
	        END_IF;
	    END_IF;
	    
	    // reload outputs
	    #outx_Motor_Neg := #lx_Motor_Neg;
	    #outx_Motor_Pos := #lx_Motor_Pos;
	    #outi_Motor_PWM := #li_PWM;
	    #outdi_Actual_Position := #ldi_Actual_Position;
	    
	ELSE
	    #lx_Init := TRUE;
	END_IF;
END_FUNCTION_BLOCK

