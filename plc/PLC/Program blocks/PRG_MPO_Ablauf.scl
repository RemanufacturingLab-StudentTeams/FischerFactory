FUNCTION_BLOCK "PRG_MPO_Ablauf"
TITLE = Program Ablauf MPO
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : 'A.Schaefer'
VERSION : 0.0
   VAR 
      lx_Init { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      lx_Start_TON_Wait { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      lx_Time_Error { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      lt_TON_Wait { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time;
      lx_Start_TON_State { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      ldt_MQTT { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Date_And_Time;
      li_Return_LDT { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      li_StepCase { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      li_Lights { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      li_Lights_old { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      lfb_blinker { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : "FB_Blinker";
      lfb_TOF_ConveyerBelt_Out {InstructionName := 'TOF_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TOF_TIME;
      lfb_TON_Wait {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
      lfb_TON_Error {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
      lfb_TON_State {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
      lfb_F_Trig_ConveyerBelt {InstructionName := 'F_TRIG'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : F_TRIG;
   END_VAR

   VAR_TEMP 
      ti_Counter : Int;
   END_VAR


BEGIN
	IF #lx_Init THEN
	    
	    // wait time state
	    #lfb_TON_State(IN := NOT #lx_Start_TON_State,
	                   PT := T#500ms);
	    
	    // runtime monitoring error
	    #lfb_TON_Error(IN := #lx_Time_Error,
	                   PT := T#15s);
	    
	    // state of the MPO cyclically transmitted to the cloud
	    // M: I don't know why this isn't just done every cycle. Next perion to work with this could look into that.
	    IF (#lfb_TON_State.Q OR (#li_Lights <> #li_Lights_old)) AND NOT #lx_Start_TON_State THEN
	        #li_Lights_old := #li_Lights;
	        #lx_Start_TON_State := TRUE;
	        #li_Return_LDT := RD_SYS_T(#ldt_MQTT);
	        //MPO info
	        "gtyp_Interface_Dashboard".Subscribe.State_MPO.ldt_ts := DT_TO_LDT(#ldt_MQTT);
	        "gtyp_Interface_Dashboard".Subscribe.State_MPO.i_code := #li_Lights;
	        "gtyp_Interface_Dashboard".Subscribe.State_MPO.s_description := '';
	        "gtyp_Interface_Dashboard".Subscribe.State_MPO.s_station := 'mpo';
	        "gtyp_Interface_Dashboard".Subscribe.State_MPO.s_target := '';
	        
	        // Errors (not properly tested and probably not working for all errors)
	        "gtyp_Interface_Dashboard".Subscribe.State_MPO.x_error := "gtyp_MPO".x_Error;
	        "gtyp_Interface_Dashboard".Subscribe.State_MPO.s_errorMessage := "gtyp_MPO".s_ErrorMessage;
	        
	        // Workpiece 
	        // UPDATING OF WORKIECE STATES WORKS IN HAPPY FLOW, BUT HAS NOT BEEN TESTED FOR EDGE CASES LIKE ERRORS AND PROBABLY WON'T HANDLE THEM PROPERLY.
	        "gtyp_Interface_Dashboard".Subscribe.State_MPO.Workpiece := "gtyp_MPO".Workpiece;
	        "gtyp_Interface_Dashboard".Subscribe.State_MPO.Workpiece.Workpiece_Parameters := "gtyp_MPO".Workpiece_Parameters;
	        
	    END_IF;
	    
	    // restart wait time state
	    IF NOT #lfb_TON_State.Q AND #lx_Start_TON_State THEN
	        #lx_Start_TON_State := FALSE;
	    END_IF;
	    
	    // FB TON Wait
	    #lfb_TON_Wait(IN := #lx_Start_TON_Wait,
	                  PT := #lt_TON_Wait);
	    
	    // falling edge light barrier end of Conveyor Belt
	    #lfb_F_Trig_ConveyerBelt(CLK := NOT "IX_MPO_LightBarrierEndOfConBelt_I3");
	    
	    //Run-on time Conveyer Belt
	    #lfb_TOF_ConveyerBelt_Out(IN := #lfb_F_Trig_ConveyerBelt.Q,
	                              PT := T#5000ms);
	    
	    // FB blinker intervall 1s
	    #lfb_blinker(int_periodendauer := T#1000ms);
	    
	    // step chain MPO
	    CASE #li_StepCase OF
	            
	        0:  // init
	            #lx_Start_TON_Wait := FALSE;
	            #lx_Time_Error := FALSE;
	            "gtyp_MPO".Workpiece.Workpiece_States.x_atSaw := FALSE;
	            "gtyp_MPO".Workpiece.Workpiece_States.x_inOven := FALSE;
	            
	            IF NOT "gtyp_MPO".x_Error AND NOT "gtyp_MPO".x_Start_Park_Position THEN
	                #li_StepCase := 10;
	            END_IF;
	            
	        10: // turn-on Compressor and turn off oven light 
	            #li_Lights := 2;
	            "QX_MPO_LightOven_Q9" := FALSE;
	            "QX_MPO_Compressor_Q10" := TRUE;
	            
	            #lx_Start_TON_Wait := TRUE;
	            #lt_TON_Wait := T#500ms;
	            
	            IF #lfb_TON_Wait.Q THEN
	                #lx_Start_TON_Wait := FALSE;
	                #li_StepCase := 20;
	            END_IF;
	            
	        20:  // Open oven door 
	            "QX_MPO_ValveOvenDoor_Q13" := TRUE;
	            "QX_MPO_ValveLowering_Q12" := FALSE;
	            
	            #lx_Start_TON_Wait := TRUE;
	            #lt_TON_Wait := T#2000ms;
	            
	            IF #lfb_TON_Wait.Q THEN
	                #lx_Start_TON_Wait := FALSE;
	                #li_StepCase := 30;
	            END_IF;
	            
	        30: // Position oven feeder retract
	            IF "IX_MPO_RefSwitchOvenFeederOutside_I7" OR NOT "IX_MPO_RefSwitchOvenFeederInside_I6" THEN
	                "QX_MPO_M4_OvenFeederRetract_Q5" := TRUE;
	                "QX_MPO_M4_OvenFeederExtend_Q6" := FALSE;
	            ELSIF NOT "IX_MPO_RefSwitchOvenFeederOutside_I7" AND "IX_MPO_RefSwitchOvenFeederInside_I6" THEN
	                "QX_MPO_M4_OvenFeederRetract_Q5" := FALSE;
	                "QX_MPO_M4_OvenFeederExtend_Q6" := FALSE;
	                #li_StepCase := 40;
	            END_IF;
	            
	        40:  // Close door, Position Vacuum Towards Turn Table and vacuum off
	            
	            "QX_MPO_ValveOvenDoor_Q13" := FALSE;
	            
	            "QX_MPO_M5_VacuumTowardsTurnTable_Q8" := TRUE;
	            "QX_MPO_M5_VacuumTowardsOven_Q7" := FALSE;
	            "QX_MPO_ValveVacuum_Q11" := FALSE;
	            
	            IF "IX_MPO_RefSwitchVac_PosOven_I8" OR NOT "IX_MPO_RefSwitchVac_PosTurnTable_I5" THEN
	                "QX_MPO_M5_VacuumTowardsTurnTable_Q8" := TRUE;
	                "QX_MPO_M5_VacuumTowardsOven_Q7" := FALSE;
	            ELSIF NOT "IX_MPO_RefSwitchVac_PosOven_I8" AND "IX_MPO_RefSwitchVac_PosTurnTable_I5" THEN
	                "QX_MPO_M5_VacuumTowardsTurnTable_Q8" := FALSE;
	                "QX_MPO_M5_VacuumTowardsOven_Q7" := FALSE;
	                #li_StepCase := 50;
	            END_IF
	            ;
	            
	        50: // saw, valve feeder conveyor belt off
	            "QX_MPO_M3_Saw_Q4" := FALSE;
	            "QX_MPO_ValveFeeder_Q14" := FALSE;
	            "QX_MPO_M2_ConveyorBeltForward_Q3" := FALSE;
	            
	            IF "IX_MPO_RefSwitchTurnTable_PosSaw_I4" OR "IX_MPO_RefSwitchTurnTable_PosBelt_I2" OR NOT "IX_MPO_RefSwitchTurnTable_PosVac_I1" THEN
	                "QX_MPO_M1_TurnTableClockwise_Q1" := FALSE;
	                "QX_MPO_M1_TurnTableCounterclockwise_Q2" := TRUE;
	            ELSIF NOT "IX_MPO_RefSwitchTurnTable_PosSaw_I4" AND NOT "IX_MPO_RefSwitchTurnTable_PosBelt_I2" AND "IX_MPO_RefSwitchTurnTable_PosVac_I1" THEN
	                "QX_MPO_M1_TurnTableClockwise_Q1" := FALSE;
	                "QX_MPO_M1_TurnTableCounterclockwise_Q2" := FALSE;
	                "QX_MPO_Compressor_Q10" := FALSE;
	                #li_StepCase := 60;
	            END_IF;
	            
	        60: // wait for request discard form VGR
	            #li_Lights := 1;
	            IF "gtyp_VGR".x_MPO_Req_Discard THEN
	                #li_Lights := 2;
	                "QX_MPO_Compressor_Q10" := TRUE;
	                #li_StepCase := 70;
	            END_IF;
	            
	        70: // wait sequence
	            #lx_Start_TON_Wait := TRUE;
	            #lt_TON_Wait := T#500ms;
	            
	            IF #lfb_TON_Wait.Q THEN
	                #lx_Start_TON_Wait := FALSE;
	                #li_StepCase := 80;
	            END_IF;
	            
	        80: // open oven door
	            "QX_MPO_ValveOvenDoor_Q13" := TRUE;
	            
	            #lx_Start_TON_Wait := TRUE;
	            #lt_TON_Wait := T#2000ms;
	            
	            IF #lfb_TON_Wait.Q THEN
	                #lx_Start_TON_Wait := FALSE;
	                #li_StepCase := 90;
	            END_IF;
	            
	        90: // oven feeder extend
	            "QX_MPO_M4_OvenFeederRetract_Q5" := FALSE;
	            "QX_MPO_M4_OvenFeederExtend_Q6" := TRUE;
	            
	            IF "IX_MPO_RefSwitchOvenFeederOutside_I7" AND NOT "IX_MPO_RefSwitchOvenFeederInside_I6" THEN
	                "QX_MPO_M4_OvenFeederRetract_Q5" := FALSE;
	                "QX_MPO_M4_OvenFeederExtend_Q6" := FALSE;
	                "gtyp_MPO".x_MPO_Discards_Accepted := FALSE;
	                "gtyp_MPO".x_Discard_Ready := TRUE;
	                #li_StepCase := 100;
	            END_IF;
	            
	        100: // wait for VGR discard workpiece
	            
	            #lx_Time_Error := TRUE;
	            
	            IF "gtyp_VGR".x_MPO_Discards AND NOT "IX_MPO_LightBarrierOven_I9" THEN
	                "gtyp_Interface_Dashboard".Subscribe.State_MPO.x_active := TRUE;
	                "gtyp_MPO".History := "gtyp_VGR".History;
	                "gtyp_MPO".Workpiece := "gtyp_VGR".Workpiece;
	                
	                //Copy the workpiece parameters from the VGR
	                "gtyp_MPO".Workpiece_Parameters := "gtyp_VGR".Worpiece_Parameters;
	                
	                "gtyp_MPO".x_Discard_Ready := FALSE;
	                "gtyp_MPO".x_MPO_Discards_Accepted := TRUE;
	                #lx_Time_Error := FALSE;
	                IF "gtyp_MPO".Workpiece_Parameters.DoOven THEN
	                    #li_StepCase := 105;
	                ELSE
	                    #li_StepCase := 140;
	                END_IF;
	            END_IF;
	            
	            // runtime error
	            IF #lfb_TON_Error.Q THEN
	                #li_Lights := 4;
	                #lx_Time_Error := FALSE;
	                "gtyp_Interface_Dashboard".Subscribe.State_Order.ldt_ts := DT_TO_LDT(#ldt_MQTT);
	                "gtyp_Interface_Dashboard".Subscribe.State_Order.s_state := 'WAITING_FOR_ORDER';
	                "gtyp_Interface_Dashboard".Subscribe.State_Order.s_type := '';
	                "gtyp_Interface_Dashboard".Subscribe.State_MPO.x_active := FALSE;
	                "gtyp_MPO".x_Discard_Ready := FALSE;
	                "gtyp_MPO".x_MPO_Discards_Accepted := FALSE;
	                "gtyp_MPO".x_Error := TRUE;
	                "gtyp_MPO".s_ErrorMessage := 'MPO RUNTIME ERROR';
	                #li_StepCase := 0;
	            END_IF;
	            
	        105: // VGR outside oven feeder - oven feeder retract
	            IF NOT "gtyp_VGR".x_MPO_Discards AND "IX_MPO_RefSwitchOvenFeederOutside_I7" AND NOT "IX_MPO_RefSwitchOvenFeederInside_I6" THEN
	                "gtyp_MPO".x_MPO_Discards_Accepted := FALSE;
	                "QX_MPO_M4_OvenFeederRetract_Q5" := TRUE;
	                "QX_MPO_M4_OvenFeederExtend_Q6" := FALSE;
	                #li_StepCase := 110;
	            END_IF;
	            
	        110: // sensor oven feeder inside reached
	            IF NOT "IX_MPO_RefSwitchOvenFeederOutside_I7" AND "IX_MPO_RefSwitchOvenFeederInside_I6" THEN
	                "QX_MPO_M4_OvenFeederRetract_Q5" := FALSE;
	                "QX_MPO_M4_OvenFeederExtend_Q6" := FALSE;
	                #li_StepCase := 120;
	            END_IF;
	            
	        120: // close oven door
	            "QX_MPO_ValveOvenDoor_Q13" := FALSE;
	            
	            #lx_Start_TON_Wait := TRUE;
	            #lt_TON_Wait := T#2000ms;
	            
	            IF #lfb_TON_Wait.Q THEN
	                #lx_Start_TON_Wait := FALSE;
	                #li_StepCase := 130;
	                
	                // Update workpiece state to oven on and update timestamp
	                "gtyp_MPO".Workpiece.Workpiece_States.ldt_Oven := DT_TO_LDT(#ldt_MQTT);
	                "gtyp_MPO".Workpiece.Workpiece_States.x_inOven := TRUE;
	            END_IF;
	            
	        130: // processing time flashing interval
	            "QX_MPO_LightOven_Q9" := #lfb_blinker.outx_blinker;
	            
	            IF NOT "gtyp_VGR".x_MPO_Discards THEN
	                #li_Return_LDT := RD_SYS_T(#ldt_MQTT);
	                "gtyp_MPO".History[5].i_code := 500;
	                "gtyp_MPO".History[5].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	                
	                "QX_MPO_M5_VacuumTowardsOven_Q7" := TRUE;
	                "QX_MPO_M5_VacuumTowardsTurnTable_Q8" := FALSE;
	                
	                IF NOT "IX_MPO_RefSwitchVac_PosTurnTable_I5" AND "IX_MPO_RefSwitchVac_PosOven_I8" THEN
	                    "QX_MPO_M5_VacuumTowardsOven_Q7" := FALSE;
	                    "QX_MPO_M5_VacuumTowardsTurnTable_Q8" := FALSE;
	                END_IF;
	            END_IF;
	            
	            
	            #lx_Start_TON_Wait := TRUE;
	            #lt_TON_Wait := "gtyp_MPO".Workpiece_Parameters.OvenTime; //Replaced the default time of T#4000ms with the variable
	            
	            IF #lfb_TON_Wait.Q THEN
	                #lx_Start_TON_Wait := FALSE;
	                #li_StepCase := 140;
	                
	                // Update workpiece state to oven off and update timestamp
	                "gtyp_MPO".Workpiece.Workpiece_States.ldt_Oven := DT_TO_LDT(#ldt_MQTT);
	                "gtyp_MPO".Workpiece.Workpiece_States.x_inOven := FALSE;
	            END_IF;
	            
	        140: // open oven door
	
	            
	            "QX_MPO_LightOven_Q9" := FALSE;
	            "QX_MPO_ValveOvenDoor_Q13" := TRUE;
	            
	            IF NOT "gtyp_VGR".x_MPO_Discards AND NOT (
	                "gtyp_VGR".horizontal_Axis.di_Actual_Position > "gtyp_VGR".di_Pos_Free_MPO_horizontal AND
	                "gtyp_VGR".rotate_Axis.di_Actual_Position < "gtyp_VGR".di_Pos_Free_MPO_Max_rotate AND
	                "gtyp_VGR".rotate_Axis.di_Actual_Position > "gtyp_VGR".di_Pos_Free_MPO_Min_rotate)THEN
	                "QX_MPO_M5_VacuumTowardsOven_Q7" := TRUE;
	                "QX_MPO_M5_VacuumTowardsTurnTable_Q8" := FALSE;
	                
	                IF NOT "IX_MPO_RefSwitchVac_PosTurnTable_I5" AND "IX_MPO_RefSwitchVac_PosOven_I8" THEN
	                    "QX_MPO_M5_VacuumTowardsOven_Q7" := FALSE;
	                    "QX_MPO_M5_VacuumTowardsTurnTable_Q8" := FALSE;
	                END_IF;
	            END_IF;
	            
	            #lx_Start_TON_Wait := TRUE;
	            #lt_TON_Wait := T#2000ms;
	            
	            IF #lfb_TON_Wait.Q THEN
	                #lx_Start_TON_Wait := FALSE;
	                #li_StepCase := 150;
	            END_IF;
	            
	        150: // oven feeder extend
	            
	            "QX_MPO_M4_OvenFeederRetract_Q5" := FALSE;
	            "QX_MPO_M4_OvenFeederExtend_Q6" := TRUE;
	            
	            IF NOT "gtyp_VGR".x_MPO_Discards AND "gtyp_VGR".horizontal_Axis.di_Actual_Position < "gtyp_VGR".di_Pos_Free_MPO_horizontal THEN
	                "QX_MPO_M5_VacuumTowardsOven_Q7" := TRUE;
	                "QX_MPO_M5_VacuumTowardsTurnTable_Q8" := FALSE;
	                
	                IF NOT "IX_MPO_RefSwitchVac_PosTurnTable_I5" AND "IX_MPO_RefSwitchVac_PosOven_I8" THEN
	                    "QX_MPO_M5_VacuumTowardsOven_Q7" := FALSE;
	                    "QX_MPO_M5_VacuumTowardsTurnTable_Q8" := FALSE;
	                END_IF;
	            END_IF;
	            
	            IF "IX_MPO_RefSwitchOvenFeederOutside_I7" AND NOT "IX_MPO_RefSwitchOvenFeederInside_I6" THEN
	                "QX_MPO_M4_OvenFeederRetract_Q5" := FALSE;
	                "QX_MPO_M4_OvenFeederExtend_Q6" := FALSE;
	            END_IF;
	            
	            IF "IX_MPO_RefSwitchOvenFeederOutside_I7" AND NOT "IX_MPO_RefSwitchOvenFeederInside_I6"
	                AND NOT "IX_MPO_RefSwitchVac_PosTurnTable_I5" AND "IX_MPO_RefSwitchVac_PosOven_I8" THEN
	                "QX_MPO_M5_VacuumTowardsOven_Q7" := FALSE;
	                "QX_MPO_M5_VacuumTowardsTurnTable_Q8" := FALSE;
	                "QX_MPO_M4_OvenFeederRetract_Q5" := FALSE;
	                "QX_MPO_M4_OvenFeederExtend_Q6" := FALSE;
	                #li_StepCase := 160;
	            END_IF;
	            
	        160: // vacuum suction device down
	            "QX_MPO_ValveLowering_Q12" := TRUE;
	            
	            #lx_Start_TON_Wait := TRUE;
	            #lt_TON_Wait := T#1000ms;
	            
	            IF #lfb_TON_Wait.Q THEN
	                #lx_Start_TON_Wait := FALSE;
	                #li_StepCase := 170;
	            END_IF;
	            
	        170: // vacuum suction device picks up the workpiece
	            "QX_MPO_ValveVacuum_Q11" := TRUE;
	            
	            #lx_Start_TON_Wait := TRUE;
	            #lt_TON_Wait := T#1000ms;
	            
	            IF #lfb_TON_Wait.Q THEN
	                #lx_Start_TON_Wait := FALSE;
	                #li_StepCase := 180;
	            END_IF;
	            
	        180: // vacuum suction device up
	            "QX_MPO_ValveLowering_Q12" := FALSE;
	            
	            #lx_Start_TON_Wait := TRUE;
	            #lt_TON_Wait := T#1000ms;
	            
	            IF #lfb_TON_Wait.Q THEN
	                #lx_Start_TON_Wait := FALSE;
	                #li_StepCase := 190;
	            END_IF;
	            
	        190: // oven feeder retract and vacuum towards turn table
	            "QX_MPO_M4_OvenFeederRetract_Q5" := TRUE;
	            "QX_MPO_M4_OvenFeederExtend_Q6" := FALSE;
	            "QX_MPO_M5_VacuumTowardsOven_Q7" := FALSE;
	            "QX_MPO_M5_VacuumTowardsTurnTable_Q8" := TRUE;
	            
	            IF "IX_MPO_RefSwitchVac_PosTurnTable_I5" AND NOT "IX_MPO_RefSwitchVac_PosOven_I8" THEN
	                "QX_MPO_M5_VacuumTowardsOven_Q7" := FALSE;
	                "QX_MPO_M5_VacuumTowardsTurnTable_Q8" := FALSE;
	            END_IF;
	            
	            IF NOT "IX_MPO_RefSwitchOvenFeederOutside_I7" AND "IX_MPO_RefSwitchOvenFeederInside_I6" THEN
	                "QX_MPO_M4_OvenFeederRetract_Q5" := FALSE;
	                "QX_MPO_M4_OvenFeederExtend_Q6" := FALSE;
	            END_IF;
	            
	            IF NOT "IX_MPO_RefSwitchOvenFeederOutside_I7" AND "IX_MPO_RefSwitchOvenFeederInside_I6"
	                AND "IX_MPO_RefSwitchVac_PosTurnTable_I5" AND NOT "IX_MPO_RefSwitchVac_PosOven_I8" THEN
	                "QX_MPO_M5_VacuumTowardsOven_Q7" := FALSE;
	                "QX_MPO_M5_VacuumTowardsTurnTable_Q8" := FALSE;
	                "QX_MPO_M4_OvenFeederRetract_Q5" := FALSE;
	                "QX_MPO_M4_OvenFeederExtend_Q6" := FALSE;
	                "QX_MPO_ValveOvenDoor_Q13" := FALSE;
	                #li_StepCase := 200;
	            END_IF;
	            
	        200: // vacuum suction device down at turn table
	            IF "IX_MPO_RefSwitchTurnTable_PosVac_I1" THEN
	                "QX_MPO_ValveLowering_Q12" := TRUE;
	                
	                #lx_Start_TON_Wait := TRUE;
	                #lt_TON_Wait := T#2000ms;
	                
	                IF #lfb_TON_Wait.Q THEN
	                    #lx_Start_TON_Wait := FALSE;
	                    #li_StepCase := 210;
	                END_IF;
	            END_IF;
	            
	        210: // vacuum off
	            "QX_MPO_ValveVacuum_Q11" := FALSE;
	            
	            #lx_Start_TON_Wait := TRUE;
	            #lt_TON_Wait := T#2000ms;
	            
	            IF #lfb_TON_Wait.Q THEN
	                #lx_Start_TON_Wait := FALSE;
	                #li_StepCase := 220;
	            END_IF;
	            
	        220: // vacuum suction device up
	            "QX_MPO_ValveLowering_Q12" := FALSE;
	            
	            #lx_Start_TON_Wait := TRUE;
	            #lt_TON_Wait := T#2000ms;
	            
	            IF #lfb_TON_Wait.Q THEN
	                #lx_Start_TON_Wait := FALSE;
	                IF "gtyp_MPO".Workpiece_Parameters.DoSaw THEN
	                    #li_StepCase := 230;
	                ELSE    //Just skip the saw all together
	                    #li_StepCase := 251;
	                END_IF;
	            END_IF;
	            
	        230: // Position turn table saw
	            IF NOT "IX_MPO_RefSwitchTurnTable_PosSaw_I4" AND NOT "IX_MPO_RefSwitchTurnTable_PosBelt_I2" AND "IX_MPO_RefSwitchTurnTable_PosVac_I1" THEN
	                "QX_MPO_M1_TurnTableClockwise_Q1" := TRUE;
	                "QX_MPO_M1_TurnTableCounterclockwise_Q2" := FALSE;
	            ELSIF "IX_MPO_RefSwitchTurnTable_PosSaw_I4" OR "IX_MPO_RefSwitchTurnTable_PosBelt_I2" AND NOT "IX_MPO_RefSwitchTurnTable_PosVac_I1" THEN
	                "QX_MPO_M1_TurnTableClockwise_Q1" := FALSE;
	                "QX_MPO_M1_TurnTableCounterclockwise_Q2" := FALSE;
	                
	                // Update workpiece state to saw on and update timestamp
	                "gtyp_MPO".Workpiece.Workpiece_States.x_atSaw := TRUE;
	                "gtyp_MPO".Workpiece.Workpiece_States.ldt_Saw := DT_TO_LDT(#ldt_MQTT);
	                
	                #li_StepCase := 240;
	            END_IF;
	            
	        240: // Start sawing
	            "QX_MPO_M3_Saw_Q4" := TRUE;
	            
	            
	            
	            #lx_Start_TON_Wait := TRUE;
	            #lt_TON_Wait := "gtyp_MPO".Workpiece_Parameters.SawTime; //Replaced the default sawing time of T#4000ms with the variable
	            
	            IF #lfb_TON_Wait.Q THEN
	                #li_Return_LDT := RD_SYS_T(#ldt_MQTT);
	                "gtyp_MPO".History[6].i_code := 600;
	                "gtyp_MPO".History[6].ldt_ts := DT_TO_LDT(#ldt_MQTT);
	                
	                #lx_Start_TON_Wait := FALSE;
	                
	                //TURN OFF SAW
	                "QX_MPO_M3_Saw_Q4" := FALSE;
	                
	                // Update workpiece state to saw off and update timestamp
	                "gtyp_MPO".Workpiece.Workpiece_States.x_atSaw := FALSE;
	                "gtyp_MPO".Workpiece.Workpiece_States.ldt_Saw := DT_TO_LDT(#ldt_MQTT);
	                
	                #li_StepCase := 250;
	            END_IF;
	            
	        250: // Position turn table Pos Belt
	            IF "IX_MPO_RefSwitchTurnTable_PosSaw_I4" AND NOT "IX_MPO_RefSwitchTurnTable_PosBelt_I2" AND NOT "IX_MPO_RefSwitchTurnTable_PosVac_I1" THEN
	                "QX_MPO_M1_TurnTableClockwise_Q1" := TRUE;
	                "QX_MPO_M1_TurnTableCounterclockwise_Q2" := FALSE;
	            ELSIF NOT "IX_MPO_RefSwitchTurnTable_PosSaw_I4" AND "IX_MPO_RefSwitchTurnTable_PosBelt_I2" AND NOT "IX_MPO_RefSwitchTurnTable_PosVac_I1" THEN
	                "QX_MPO_M1_TurnTableClockwise_Q1" := FALSE;
	                "QX_MPO_M1_TurnTableCounterclockwise_Q2" := FALSE;
	                #li_StepCase := 260;
	            END_IF;
	            
	        251: // Position turn table Pos Belt Directly (this has been added by me)
	            IF NOT "IX_MPO_RefSwitchTurnTable_PosBelt_I2" THEN
	                "gtyp_MPO"."i_PWM_TurnTable" := 700;
	                "QX_MPO_M1_TurnTableClockwise_Q1" := TRUE;
	                "QX_MPO_M1_TurnTableCounterclockwise_Q2" := FALSE;
	            ELSIF NOT "IX_MPO_RefSwitchTurnTable_PosSaw_I4" AND "IX_MPO_RefSwitchTurnTable_PosBelt_I2" AND NOT "IX_MPO_RefSwitchTurnTable_PosVac_I1" THEN
	                "gtyp_MPO"."i_PWM_TurnTable" := 1000;
	                "QX_MPO_M1_TurnTableClockwise_Q1" := FALSE;
	                "QX_MPO_M1_TurnTableCounterclockwise_Q2" := FALSE;
	                #li_StepCase := 260;
	            END_IF;
	            
	        260: // put workpiece to belt
	            "QX_MPO_ValveFeeder_Q14" := TRUE;
	            
	            #lx_Start_TON_Wait := TRUE;
	            #lt_TON_Wait := T#1000ms;
	            
	            IF #lfb_TON_Wait.Q THEN
	                #lx_Start_TON_Wait := FALSE;
	                "QX_MPO_ValveFeeder_Q14" := FALSE;
	                "QX_MPO_Compressor_Q10" := FALSE;
	                #li_StepCase := 270;
	            END_IF;
	            
	        270: // Position turn table Pos Vacuum
	            IF "IX_MPO_RefSwitchTurnTable_PosSaw_I4" OR "IX_MPO_RefSwitchTurnTable_PosBelt_I2" OR NOT "IX_MPO_RefSwitchTurnTable_PosVac_I1" THEN
	                "QX_MPO_M1_TurnTableClockwise_Q1" := FALSE;
	                "QX_MPO_M1_TurnTableCounterclockwise_Q2" := TRUE;
	            ELSIF NOT "IX_MPO_RefSwitchTurnTable_PosSaw_I4" AND NOT "IX_MPO_RefSwitchTurnTable_PosBelt_I2" AND "IX_MPO_RefSwitchTurnTable_PosVac_I1" THEN
	                "QX_MPO_M1_TurnTableClockwise_Q1" := FALSE;
	                "QX_MPO_M1_TurnTableCounterclockwise_Q2" := FALSE;
	                "QX_MPO_Compressor_Q10" := FALSE;
	                #li_StepCase := 280;
	            END_IF;
	            
	        280: // Start conveyor belt
	            "QX_MPO_M2_ConveyorBeltForward_Q3" := TRUE;
	            
	            #lx_Time_Error := TRUE;
	            
	            IF #lfb_TOF_ConveyerBelt_Out.Q THEN
	                "gtyp_SLD".History := "gtyp_MPO".History;
	                "gtyp_SLD".Workpiece := "gtyp_MPO".Workpiece;
	                "gtyp_MPO".Workpiece.s_id := '0';
	                "gtyp_MPO".Workpiece.s_state := '';
	                "gtyp_MPO".Workpiece.s_type := '';
	                FOR #ti_Counter := 1 TO 8 DO
	                    "gtyp_MPO".History[#ti_Counter].i_code := 0;
	                    "gtyp_MPO".History[#ti_Counter].ldt_ts := DT#1990-01-01-00:00:00;
	                END_FOR;
	                
	                "gtyp_Interface_Dashboard".Subscribe.State_MPO.x_active := FALSE;
	                
	                #lx_Time_Error := FALSE;
	                #li_StepCase := 290;
	            END_IF;
	            
	            // runtime error
	            IF #lfb_TON_Error.Q THEN
	                #li_Lights := 4;
	                #lx_Time_Error := FALSE;
	                "QX_MPO_M2_ConveyorBeltForward_Q3" := FALSE;
	                "gtyp_Interface_Dashboard".Subscribe.State_MPO.x_active := FALSE;
	                "gtyp_MPO".x_Error := TRUE;
	                "gtyp_MPO".s_ErrorMessage := 'MPO RUNTIME ERROR';
	                #li_StepCase := 0;
	            END_IF;
	            
	        290: // wait for runtime on conveyor belt
	            
	            IF NOT #lfb_TOF_ConveyerBelt_Out.Q THEN
	                #lx_Start_TON_Wait := FALSE;
	                "QX_MPO_M2_ConveyorBeltForward_Q3" := FALSE;
	                #li_StepCase := 60;
	            END_IF;
	            // Statement section ELSE
	        ELSE
	            ;
	    END_CASE;
	    
	    "QW_MPO_PWM_TurnTable_M1" := "gtyp_MPO"."i_PWM_TurnTable";
	    "QW_MPO_PWM_Vacuum_M5" := "gtyp_MPO"."i_PWM_Vacuum";
	    
	ELSE
	    #li_Lights := 1;
	    #lx_Init := TRUE;
	    "gtyp_MPO".x_Start_Park_Position := FALSE;
	    "gtyp_MPO".x_Park_Position_Reached := FALSE;
	END_IF;
END_FUNCTION_BLOCK

